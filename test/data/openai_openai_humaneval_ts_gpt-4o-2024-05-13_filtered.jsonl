{"task_id": "HumanEval/0", "translation": "function hasCloseElements(numbers: number[], threshold: number): boolean {\n    /**\n     * Check if in given list of numbers, are any two numbers closer to each other than\n     * given threshold.\n     * Example usage:\n     * console.log(hasCloseElements([1.0, 2.0, 3.0], 0.5)); // False\n     * console.log(hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)); // True\n     */\n    \n    for (let idx = 0; idx < numbers.length; idx++) {\n        for (let idx2 = 0; idx2 < numbers.length; idx2++) {\n            if (idx !== idx2) {\n                const distance = Math.abs(numbers[idx] - numbers[idx2]);\n                if (distance < threshold) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}"}
{"task_id": "HumanEval/1", "translation": "function separateParenGroups(parenString: string): string[] {\n    /**\n     * Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n     * separate those group into separate strings and return the list of those.\n     * Separate groups are balanced (each open brace is properly closed) and not nested within each other\n     * Ignore any spaces in the input string.\n     * \n     * Example:\n     * console.log(separateParenGroups('( ) (( )) (( )( ))'))\n     * // Output: ['()', '(())', '(()())']\n     */\n\n    const result: string[] = [];\n    let currentString: string[] = [];\n    let currentDepth = 0;\n\n    for (const c of parenString) {\n        if (c === '(') {\n            currentDepth += 1;\n            currentString.push(c);\n        } else if (c === ')') {\n            currentDepth -= 1;\n            currentString.push(c);\n\n            if (currentDepth === 0) {\n                result.push(currentString.join(''));\n                currentString = [];\n            }\n        }\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval/2", "translation": "function truncateNumber(number: number): number {\n    /**\n     * Given a positive floating point number, it can be decomposed into\n     * an integer part (largest integer smaller than given number) and decimals\n     * (leftover part always smaller than 1).\n     * \n     * Return the decimal part of the number.\n     * // truncateNumber(3.5)\n     * // 0.5\n     */\n\n    return number % 1.0;\n}"}
{"task_id": "HumanEval/3", "translation": "function below_zero(operations: number[]): boolean {\n    /**\n     * You're given a list of deposit and withdrawal operations on a bank account that starts with\n     * zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n     * at that point function should return True. Otherwise, it should return False.\n     * \n     * Examples:\n     * below_zero([1, 2, 3]) => False\n     * below_zero([1, 2, -4, 5]) => True\n     */\n\n    let balance = 0;\n\n    for (let op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n\n    return false;\n}"}
{"task_id": "HumanEval/4", "translation": "function meanAbsoluteDeviation(numbers: number[]): number {\n    /**\n     * For a given list of input numbers, calculate Mean Absolute Deviation\n     * around the mean of this dataset.\n     * Mean Absolute Deviation is the average absolute difference between each\n     * element and a centerpoint (mean in this case):\n     * MAD = average | x - x_mean |\n     * Example:\n     * meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n     * returns 1.0\n     */\n\n    const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n    return numbers.reduce((acc, val) => acc + Math.abs(val - mean), 0) / numbers.length;\n}"}
{"task_id": "HumanEval/5", "translation": "function intersperse(numbers: number[], delimeter: number): number[] {\n    /** Insert a number 'delimeter' between every two consecutive elements of input list `numbers`\n    Example:\n    console.log(intersperse([], 4)); // []\n    console.log(intersperse([1, 2, 3], 4)); // [1, 4, 2, 4, 3]\n    */\n\n    if (numbers.length === 0) {\n        return [];\n    }\n\n    const result: number[] = [];\n\n    for (let i = 0; i < numbers.length - 1; i++) {\n        result.push(numbers[i]);\n        result.push(delimeter);\n    }\n\n    result.push(numbers[numbers.length - 1]);\n\n    return result;\n}"}
{"task_id": "HumanEval/6", "translation": "function parseNestedParens(parenString: string): number[] {\n    /**\n     * Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n     * For each of the group, output the deepest level of nesting of parentheses.\n     * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n     *\n     * >>> parseNestedParens('(()()) ((())) () ((())()())')\n     * [2, 3, 1, 3]\n     */\n\n    function parseParenGroup(s: string): number {\n        let depth = 0;\n        let maxDepth = 0;\n        for (const c of s) {\n            if (c === '(') {\n                depth += 1;\n                maxDepth = Math.max(depth, maxDepth);\n            } else {\n                depth -= 1;\n            }\n        }\n        return maxDepth;\n    }\n\n    return parenString.split(' ').filter(x => x).map(parseParenGroup);\n}"}
{"task_id": "HumanEval/7", "translation": "function filterBySubstring(strings: string[], substring: string): string[] {\n    /** \n     * Filter an input list of strings only for ones that contain given substring\n     * \n     * Example usage:\n     * filterBySubstring([], 'a'); // []\n     * filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a'); // ['abc', 'bacd', 'array']\n     */\n    return strings.filter(x => x.includes(substring));\n}"}
{"task_id": "HumanEval/8", "translation": "function sumProduct(numbers: number[]): [number, number] {\n    /**\n     * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n     * Empty sum should be equal to 0 and empty product should be equal to 1.\n     * sumProduct([]) => [0, 1]\n     * sumProduct([1, 2, 3, 4]) => [10, 24]\n     */\n\n    let sumValue = 0;\n    let prodValue = 1;\n\n    for (const n of numbers) {\n        sumValue += n;\n        prodValue *= n;\n    }\n    return [sumValue, prodValue];\n}"}
{"task_id": "HumanEval/9", "translation": "function rollingMax(numbers: number[]): number[] {\n    /**\n     * From a given list of integers, generate a list of rolling maximum element found until given moment\n     * in the sequence.\n     * @example\n     * rollingMax([1, 2, 3, 2, 3, 4, 2])\n     * // returns [1, 2, 3, 3, 3, 4, 4]\n     */\n\n    let runningMax: number | null = null;\n    let result: number[] = [];\n\n    for (let n of numbers) {\n        if (runningMax === null) {\n            runningMax = n;\n        } else {\n            runningMax = Math.max(runningMax, n);\n        }\n\n        result.push(runningMax);\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval/10", "translation": "function isPalindrome(str: string): boolean {\n    /** Test if given string is a palindrome */\n    return str === str.split('').reverse().join('');\n}\n\nfunction makePalindrome(str: string): string {\n    /** Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    */\n\n    if (!str) {\n        return '';\n    }\n\n    let beginningOfSuffix = 0;\n\n    while (!isPalindrome(str.substring(beginningOfSuffix))) {\n        beginningOfSuffix += 1;\n    }\n\n    return str + str.substring(0, beginningOfSuffix).split('').reverse().join('');\n}\n\n// Example usage (similar to docstring examples in Python):\nconsole.log(makePalindrome(''));  // ''\nconsole.log(makePalindrome('cat'));  // 'catac'\nconsole.log(makePalindrome('cata'));  // 'catac'"}
{"task_id": "HumanEval/11", "translation": "function stringXor(a: string, b: string): string {\n    /**\n    * Input are two strings a and b consisting only of 1s and 0s.\n    * Perform binary XOR on these inputs and return result also as a string.\n    * Example:\n    * stringXor('010', '110') -> '100'\n    */\n\n    function xor(i: string, j: string): string {\n        if (i === j) {\n            return '0';\n        } else {\n            return '1';\n        }\n    }\n\n    return Array.from(a).map((char, index) => xor(char, b[index])).join('');\n}"}
{"task_id": "HumanEval/12", "translation": "function longest(strings: string[]): string | null {\n    /**\n     * Out of list of strings, return the longest one. Return the first one in case of multiple\n     * strings of the same length. Return null in case the input list is empty.\n     * \n     * longest([])\n     * \n     * longest(['a', 'b', 'c'])\n     * 'a'\n     * longest(['a', 'bb', 'ccc'])\n     * 'ccc'\n     */\n\n    if (strings.length === 0) {\n        return null;\n    }\n\n    const maxlen = Math.max(...strings.map(x => x.length));\n    for (const s of strings) {\n        if (s.length === maxlen) {\n            return s;\n        }\n    }\n}"}
{"task_id": "HumanEval/13", "translation": "function greatestCommonDivisor(a: number, b: number): number {\n    /**\n     * Return the greatest common divisor of two integers a and b\n     * @example\n     * greatestCommonDivisor(3, 5) // 1\n     * greatestCommonDivisor(25, 15) // 5\n     */\n\n    while (b !== 0) {\n        [a, b] = [b, a % b];\n    }\n    return a;\n}"}
{"task_id": "HumanEval/14", "translation": "function allPrefixes(string: string): string[] {\n    /**\n     * Return list of all prefixes from shortest to longest of the input string\n     * @example\n     * allPrefixes('abc')\n     * // returns ['a', 'ab', 'abc']\n     */\n    const result: string[] = [];\n\n    for (let i = 0; i < string.length; i++) {\n        result.push(string.substring(0, i + 1));\n    }\n    return result;\n}"}
{"task_id": "HumanEval/15", "translation": "function stringSequence(n: number): string {\n    /**\n     * Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n     * @example\n     * stringSequence(0)\n     * // '0'\n     * stringSequence(5)\n     * // '0 1 2 3 4 5'\n     */\n    \n    return Array.from({ length: n + 1 }, (_, x) => x.toString()).join(' ');\n}"}
{"task_id": "HumanEval/16", "translation": "function countDistinctCharacters(str: string): number {\n    /**\n     * Given a string, find out how many distinct characters (regardless of case) does it consist of\n     * // Example:\n     * console.log(countDistinctCharacters('xyzXYZ')) // 3\n     * console.log(countDistinctCharacters('Jerry')) // 4\n     */\n\n    const lowerCaseStr = str.toLowerCase();\n    const charSet = new Set(lowerCaseStr);\n    return charSet.size;\n}"}
{"task_id": "HumanEval/17", "translation": "function parseMusic(musicString: string): number[] {\n    /**\n     * Input to this function is a string representing musical notes in a special ASCII format.\n     * Your task is to parse this string and return list of integers corresponding to how many beats does each\n     * not last.\n     *\n     * Here is a legend:\n     * 'o' - whole note, lasts four beats\n     * 'o|' - half note, lasts two beats\n     * '.|' - quarter note, lasts one beat\n     *\n     * Usage Example:\n     * parseMusic('o o| .| o| o| .| .| .| .| o o')\n     * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n\n    const noteMap: { [key: string]: number } = { 'o': 4, 'o|': 2, '.|': 1 };\n    return musicString.split(' ').filter(x => x).map(x => noteMap[x]);\n}"}
{"task_id": "HumanEval/18", "translation": "function howManyTimes(string: string, substring: string): number {\n    /**\n     * Find how many times a given substring can be found in the original string. Count overlapping cases.\n     * Examples:\n     * howManyTimes('', 'a') => 0\n     * howManyTimes('aaa', 'a') => 3\n     * howManyTimes('aaaa', 'aa') => 3\n     */\n\n    let times = 0;\n\n    for (let i = 0; i <= string.length - substring.length; i++) {\n        if (string.substring(i, i + substring.length) === substring) {\n            times += 1;\n        }\n    }\n\n    return times;\n}"}
{"task_id": "HumanEval/19", "translation": "function sortNumbers(numbers: string): string {\n    /**\n     * Input is a space-delimited string of numerals from 'zero' to 'nine'.\n     * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n     * Return the string with numbers sorted from smallest to largest\n     * @example\n     * sortNumbers('three one five') // 'one three five'\n     */\n\n    const valueMap: { [key: string]: number } = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n\n    return numbers.split(' ')\n        .filter(x => x)\n        .sort((a, b) => valueMap[a] - valueMap[b])\n        .join(' ');\n}"}
{"task_id": "HumanEval/20", "translation": "function findClosestElements(numbers: number[]): [number, number] {\n    /**\n     * From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n     * other and return them in order (smaller number, larger number).\n     * >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n     * [2.0, 2.2]\n     * >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n     * [2.0, 2.0]\n     */\n\n    let closestPair: [number, number] | null = null;\n    let distance: number | null = null;\n\n    for (let idx = 0; idx < numbers.length; idx++) {\n        for (let idx2 = 0; idx2 < numbers.length; idx2++) {\n            if (idx !== idx2) {\n                if (distance === null) {\n                    distance = Math.abs(numbers[idx] - numbers[idx2]);\n                    closestPair = [numbers[idx], numbers[idx2]].sort((a, b) => a - b) as [number, number];\n                } else {\n                    const newDistance = Math.abs(numbers[idx] - numbers[idx2]);\n                    if (newDistance < distance) {\n                        distance = newDistance;\n                        closestPair = [numbers[idx], numbers[idx2]].sort((a, b) => a - b) as [number, number];\n                    }\n                }\n            }\n        }\n    }\n\n    return closestPair!;\n}"}
{"task_id": "HumanEval/21", "translation": "function rescaleToUnit(numbers: number[]): number[] {\n    /**\n     * Given list of numbers (of at least two elements), apply a linear transform to that list,\n     * such that the smallest number will become 0 and the largest will become 1\n     * Example:\n     * rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n     * Output: [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n\n    const minNumber = Math.min(...numbers);\n    const maxNumber = Math.max(...numbers);\n    return numbers.map(x => (x - minNumber) / (maxNumber - minNumber));\n}"}
{"task_id": "HumanEval/22", "translation": "function filterIntegers(values: any[]): number[] {\n    /**\n     * Filter given list of any JavaScript values only for integers\n     * \n     * // Example\n     * filterIntegers(['a', 3.14, 5]); // [5]\n     * filterIntegers([1, 2, 3, 'abc', {}, []]); // [1, 2, 3]\n     */\n\n    return values.filter(x => typeof x === 'number' && Number.isInteger(x));\n}"}
{"task_id": "HumanEval/23", "translation": "function strlen(string: string): number {\n    /**\n     * Return length of given string\n     * \n     * Examples:\n     * \n     * strlen('');\n     * // 0\n     * \n     * strlen('abc');\n     * // 3\n     */\n\n    return string.length;\n}"}
{"task_id": "HumanEval/24", "translation": "function largestDivisor(n: number): number {\n    /**\n     * For a given number n, find the largest number that divides n evenly, smaller than n\n     * @param n - The number to find the largest divisor for\n     * @returns The largest divisor of n that is smaller than n\n     * \n     * Example:\n     * largestDivisor(15) => 5\n     */\n    \n    for (let i = n - 1; i > 0; i--) {\n        if (n % i === 0) {\n            return i;\n        }\n    }\n\n    // This line will never be reached because the loop always finds a divisor\n    return 1;\n}"}
{"task_id": "HumanEval/25", "translation": "function factorize(n: number): number[] {\n    /**\n     * Return list of prime factors of given integer in the order from smallest to largest.\n     * Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n     * Input number should be equal to the product of all factors\n     * // Example usage:\n     * // console.log(factorize(8)); // [2, 2, 2]\n     * // console.log(factorize(25)); // [5, 5]\n     * // console.log(factorize(70)); // [2, 5, 7]\n     */\n    \n    const fact: number[] = [];\n    let i = 2;\n\n    while (i <= Math.floor(Math.sqrt(n) + 1)) {\n        if (n % i === 0) {\n            fact.push(i);\n            n = Math.floor(n / i);\n        } else {\n            i += 1;\n        }\n    }\n\n    if (n > 1) {\n        fact.push(n);\n    }\n\n    return fact;\n}"}
{"task_id": "HumanEval/26", "translation": "function removeDuplicates(numbers: number[]): number[] {\n    /**\n     * From a list of integers, remove all elements that occur more than once.\n     * Keep order of elements left the same as in the input.\n     * >>> removeDuplicates([1, 2, 3, 2, 4])\n     * [1, 3, 4]\n     */\n    \n    const countMap = new Map<number, number>();\n\n    // Count occurrences of each number\n    numbers.forEach((num) => {\n        countMap.set(num, (countMap.get(num) || 0) + 1);\n    });\n\n    // Filter out numbers that occur more than once\n    return numbers.filter((num) => countMap.get(num)! <= 1);\n}"}
{"task_id": "HumanEval/27", "translation": "function flipCase(str: string): string {\n    /**\n     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n     * >>> flipCase('Hello')\n     * 'hELLO'\n     */\n    return str.split('').map(char => {\n        if (char === char.toUpperCase()) {\n            return char.toLowerCase();\n        } else {\n            return char.toUpperCase();\n        }\n    }).join('');\n}"}
{"task_id": "HumanEval/28", "translation": "function concatenate(strings: string[]): string {\n    /**\n     * Concatenate list of strings into a single string\n     * Example usage:\n     * console.log(concatenate([])); // ''\n     * console.log(concatenate(['a', 'b', 'c'])); // 'abc'\n     */\n    \n    return strings.join('');\n}"}
{"task_id": "HumanEval/29", "translation": "function filterByPrefix(strings: string[], prefix: string): string[] {\n    /**\n     * Filter an input list of strings only for ones that start with a given prefix.\n     * Example usage:\n     * filterByPrefix([], 'a') // []\n     * filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a') // ['abc', 'array']\n     */\n\n    return strings.filter(x => x.startsWith(prefix));\n}"}
{"task_id": "HumanEval/30", "translation": "function getPositive(l: number[]): number[] {\n    /**\n     * Return only positive numbers in the list.\n     * >>> getPositive([-1, 2, -4, 5, 6])\n     * [2, 5, 6]\n     * >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * [5, 3, 2, 3, 9, 123, 1]\n     */\n    return l.filter(e => e > 0);\n}"}
{"task_id": "HumanEval/31", "translation": "function isPrime(n: number): boolean {\n    /**\n     * Return true if a given number is prime, and false otherwise.\n     * \n     * Examples:\n     * isPrime(6) => false\n     * isPrime(101) => true\n     * isPrime(11) => true\n     * isPrime(13441) => true\n     * isPrime(61) => true\n     * isPrime(4) => false\n     * isPrime(1) => false\n     */\n\n    if (n < 2) {\n        return false;\n    }\n    for (let k = 2; k < n - 1; k++) {\n        if (n % k === 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval/32", "translation": "function poly(xs: number[], x: number): number {\n    /**\n     * Evaluates polynomial with coefficients xs at point x.\n     * return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    return xs.reduce((sum, coeff, i) => sum + coeff * Math.pow(x, i), 0);\n}\n\nfunction find_zero(xs: number[]): number {\n    /**\n     * xs are coefficients of a polynomial.\n     * find_zero find x such that poly(x) = 0.\n     * find_zero returns only only zero point, even if there are many.\n     * Moreover, find_zero only takes list xs having even number of coefficients\n     * and largest non zero coefficient as it guarantees\n     * a solution.\n     * >>> round(find_zero([1, 2]), 2) // f(x) = 1 + 2x\n     * -0.5\n     * >>> round(find_zero([-6, 11, -6, 1]), 2) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n     * 1.0\n     */\n\n    let begin = -1.0, end = 1.0;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.0;\n        end *= 2.0;\n    }\n    while (end - begin > 1e-10) {\n        const center = (begin + end) / 2.0;\n        if (poly(xs, center) * poly(xs, begin) > 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}"}
{"task_id": "HumanEval/33", "translation": "function sortThird(l: number[]): number[] {\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n     * to the values of the corresponding indices of l, but sorted.\n     * \n     * Examples:\n     * sortThird([1, 2, 3]) => [1, 2, 3]\n     * sortThird([5, 6, 3, 4, 8, 9, 2]) => [2, 6, 3, 4, 8, 9, 5]\n     */\n\n    // Create a copy of the array to avoid mutating the input\n    let result = [...l];\n    \n    // Extract elements at indices divisible by 3\n    let elementsToSort = result.filter((_value, index) => index % 3 === 0);\n    \n    // Sort the extracted elements\n    elementsToSort.sort((a, b) => a - b);\n    \n    // Replace elements at indices divisible by 3 with the sorted ones\n    for (let i = 0; i < result.length; i += 3) {\n        result[i] = elementsToSort.shift()!;\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval/34", "translation": "function unique(l: number[]): number[] {\n    /** Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    */\n\n    return Array.from(new Set(l)).sort((a, b) => a - b);\n}"}
{"task_id": "HumanEval/35", "translation": "function maxElement(l: number[]): number {\n    /**\n     * Return maximum element in the list.\n     * >>> maxElement([1, 2, 3])\n     * 3\n     * >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * 123\n     */\n\n    let m = l[0];\n    for (const e of l) {\n        if (e > m) {\n            m = e;\n        }\n    }\n    return m;\n}"}
{"task_id": "HumanEval/36", "translation": "function fizzBuzz(n: number): number {\n    /**\n     * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n     * @example\n     * fizzBuzz(50); // 0\n     * fizzBuzz(78); // 2\n     * fizzBuzz(79); // 3\n     */\n    \n    let ns: number[] = [];\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            ns.push(i);\n        }\n    }\n    let s: string = ns.map(String).join('');\n    let ans: number = 0;\n    for (let c of s) {\n        ans += (c === '7') ? 1 : 0;\n    }\n    return ans;\n}"}
{"task_id": "HumanEval/37", "translation": "function sortEven(l: number[]): number[] {\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the odd indices, while its values at the even indices are equal\n     * to the values of the even indices of l, but sorted.\n     * \n     * Examples:\n     * sortEven([1, 2, 3]) => [1, 2, 3]\n     * sortEven([5, 6, 3, 4]) => [3, 6, 5, 4]\n     */\n\n    const evens = l.filter((_, index) => index % 2 === 0);\n    const odds = l.filter((_, index) => index % 2 !== 0);\n    evens.sort((a, b) => a - b);\n\n    const ans: number[] = [];\n    for (let i = 0; i < odds.length; i++) {\n        ans.push(evens[i], odds[i]);\n    }\n    if (evens.length > odds.length) {\n        ans.push(evens[evens.length - 1]);\n    }\n\n    return ans;\n}"}
{"task_id": "HumanEval/38", "translation": "function encodeCyclic(s: string): string {\n    /**\n     * returns encoded string by cycling groups of three characters.\n     */\n    // split string to groups. Each of length 3.\n    const groups = Array.from({ length: Math.ceil(s.length / 3) }, (_, i) => s.slice(3 * i, Math.min(3 * i + 3, s.length)));\n    // cycle elements in each group. Unless group has fewer elements than 3.\n    const cycledGroups = groups.map(group => group.length === 3 ? group.slice(1) + group[0] : group);\n    return cycledGroups.join('');\n}\n\nfunction decodeCyclic(s: string): string {\n    /**\n     * takes as input string encoded with encode_cyclic function. Returns decoded string.\n     */\n    return encodeCyclic(encodeCyclic(s));\n}"}
{"task_id": "HumanEval/39", "translation": "function primeFib(n: number): number {\n    /**\n     * primeFib returns n-th number that is a Fibonacci number and it's also prime.\n     * >>> primeFib(1)\n     * 2\n     * >>> primeFib(2)\n     * 3\n     * >>> primeFib(3)\n     * 5\n     * >>> primeFib(4)\n     * 13\n     * >>> primeFib(5)\n     * 89\n     */\n\n    function isPrime(p: number): boolean {\n        if (p < 2) {\n            return false;\n        }\n        for (let k = 2; k <= Math.min(Math.sqrt(p), p - 1); k++) {\n            if (p % k === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    const f: number[] = [0, 1];\n    while (true) {\n        f.push(f[f.length - 1] + f[f.length - 2]);\n        if (isPrime(f[f.length - 1])) {\n            n -= 1;\n        }\n        if (n === 0) {\n            return f[f.length - 1];\n        }\n    }\n}"}
{"task_id": "HumanEval/40", "translation": "function triplesSumToZero(l: number[]): boolean {\n    /**\n     * triplesSumToZero takes a list of integers as an input.\n     * it returns True if there are three distinct elements in the list that\n     * sum to zero, and False otherwise.\n     * \n     * >>> triplesSumToZero([1, 3, 5, 0])\n     * False\n     * >>> triplesSumToZero([1, 3, -2, 1])\n     * True\n     * >>> triplesSumToZero([1, 2, 3, 7])\n     * False\n     * >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n     * True\n     * >>> triplesSumToZero([1])\n     * False\n     */\n    \n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "HumanEval/41", "translation": "function carRaceCollision(n: number): number {\n    /**\n     * Imagine a road that's a perfectly straight infinitely long line.\n     * n cars are driving left to right; simultaneously, a different set of n cars\n     * are driving right to left. The two sets of cars start out being very far from\n     * each other. All cars move in the same speed. Two cars are said to collide\n     * when a car that's moving left to right hits a car that's moving right to left.\n     * However, the cars are infinitely sturdy and strong; as a result, they continue moving\n     * in their trajectory as if they did not collide.\n     *\n     * This function outputs the number of such collisions.\n     */\n\n    return n ** 2;\n}"}
{"task_id": "HumanEval/42", "translation": "function incrList(l: number[]): number[] {\n    /**\n     * Return list with elements incremented by 1.\n     * // Examples:\n     * console.log(incrList([1, 2, 3])); // [2, 3, 4]\n     * console.log(incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])); // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    return l.map(e => e + 1);\n}"}
{"task_id": "HumanEval/43", "translation": "function pairsSumToZero(l: number[]): boolean {\n    /**\n     * pairsSumToZero takes a list of integers as an input.\n     * it returns True if there are two distinct elements in the list that\n     * sum to zero, and False otherwise.\n     * >>> pairsSumToZero([1, 3, 5, 0])\n     * False\n     * >>> pairsSumToZero([1, 3, -2, 1])\n     * False\n     * >>> pairsSumToZero([1, 2, 3, 7])\n     * False\n     * >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n     * True\n     * >>> pairsSumToZero([1])\n     * False\n     */\n    \n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] === 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "HumanEval/44", "translation": "function changeBase(x: number, base: number): string {\n    /**\n     * Change numerical base of input number x to base.\n     * return string representation after the conversion.\n     * base numbers are less than 10.\n     * >>> changeBase(8, 3)\n     * '22'\n     * >>> changeBase(8, 2)\n     * '1000'\n     * >>> changeBase(7, 2)\n     * '111'\n     */\n\n    let ret = \"\";\n    while (x > 0) {\n        ret = (x % base).toString() + ret;\n        x = Math.floor(x / base);\n    }\n    return ret;\n}"}
{"task_id": "HumanEval/45", "translation": "/**\n * Given length of a side and height, return area for a triangle.\n * @param {number} a - The length of the side.\n * @param {number} h - The height.\n * @returns {number} The area of the triangle.\n * @example\n * triangleArea(5, 3); // returns 7.5\n */\nfunction triangleArea(a: number, h: number): number {\n    return a * h / 2.0;\n}"}
{"task_id": "HumanEval/46", "translation": "function fib4(n: number): number {\n    /**\n     * The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n     * fib4(0) -> 0\n     * fib4(1) -> 0\n     * fib4(2) -> 2\n     * fib4(3) -> 0\n     * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n     * >>> fib4(5)\n     * 4\n     * >>> fib4(6)\n     * 8\n     * >>> fib4(7)\n     * 14\n     */\n\n    const results: number[] = [0, 0, 2, 0];\n    if (n < 4) {\n        return results[n];\n    }\n\n    for (let i = 4; i <= n; i++) {\n        results.push(results[results.length - 1] + results[results.length - 2] + results[results.length - 3] + results[results.length - 4]);\n        results.shift();\n    }\n\n    return results[results.length - 1];\n}"}
{"task_id": "HumanEval/47", "translation": "function median(l: number[]): number {\n    /**\n     * Return median of elements in the list l.\n     * >>> median([3, 1, 2, 4, 5])\n     * 3\n     * >>> median([-10, 4, 6, 1000, 10, 20])\n     * 15.0\n     */\n\n    l = l.slice().sort((a, b) => a - b);\n    if (l.length % 2 === 1) {\n        return l[Math.floor(l.length / 2)];\n    } else {\n        return (l[l.length / 2 - 1] + l[l.length / 2]) / 2.0;\n    }\n}"}
{"task_id": "HumanEval/48", "translation": "function is_palindrome(text: string): boolean {\n    /**\n     * Checks if given string is a palindrome\n     * Examples:\n     * is_palindrome('')\n     * True\n     * is_palindrome('aba')\n     * True\n     * is_palindrome('aaaaa')\n     * True\n     * is_palindrome('zbcd')\n     * False\n     */\n\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] !== text[text.length - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval/49", "translation": "function modp(n: number, p: number): number {\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * @example\n     * modp(3, 5) // 3\n     * modp(1101, 101) // 2\n     * modp(0, 101) // 1\n     * modp(3, 11) // 8\n     * modp(100, 101) // 1\n     */\n    \n    let ret = 1;\n    for (let i = 0; i < n; i++) {\n        ret = (2 * ret) % p;\n    }\n    return ret;\n}"}
{"task_id": "HumanEval/50", "translation": "function encodeShift(s: string): string {\n    /**\n     * Returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    return s.split('').map(ch => String.fromCharCode(((ch.charCodeAt(0) + 5 - 'a'.charCodeAt(0)) % 26) + 'a'.charCodeAt(0))).join('');\n}\n\nfunction decodeShift(s: string): string {\n    /**\n     * Takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    return s.split('').map(ch => String.fromCharCode(((ch.charCodeAt(0) - 5 - 'a'.charCodeAt(0)) % 26) + 'a'.charCodeAt(0))).join('');\n}"}
{"task_id": "HumanEval/51", "translation": "function removeVowels(text: string): string {\n    /**\n     * removeVowels is a function that takes string and returns string without vowels.\n     * // Test cases:\n     * console.log(removeVowels('')); // ''\n     * console.log(removeVowels(\"abcdef\\nghijklm\")); // 'bcdf\\nghjklm'\n     * console.log(removeVowels('abcdef')); // 'bcdf'\n     * console.log(removeVowels('aaaaa')); // ''\n     * console.log(removeVowels('aaBAA')); // 'B'\n     * console.log(removeVowels('zbcd')); // 'zbcd'\n     */\n\n    return text.split('').filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"].includes(s.toLowerCase())).join('');\n}"}
{"task_id": "HumanEval/52", "translation": "function belowThreshold(l: number[], t: number): boolean {\n    /**\n     * Return True if all numbers in the list l are below threshold t.\n     * \n     * Example:\n     * belowThreshold([1, 2, 4, 10], 100) => true\n     * belowThreshold([1, 20, 4, 10], 5) => false\n     */\n\n    for (let e of l) {\n        if (e >= t) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval/53", "translation": "/**\n * Add two numbers x and y\n * @param x - first number\n * @param y - second number\n * @returns sum of x and y\n * @example\n * add(2, 3); // 5\n * add(5, 7); // 12\n */\nfunction add(x: number, y: number): number {\n    return x + y;\n}"}
{"task_id": "HumanEval/54", "translation": "function sameChars(s0: string, s1: string): boolean {\n    /**\n     * Check if two words have the same characters.\n     * >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n     * True\n     * >>> sameChars('abcd', 'dddddddabc')\n     * True\n     * >>> sameChars('dddddddabc', 'abcd')\n     * True\n     * >>> sameChars('eabcd', 'dddddddabc')\n     * False\n     * >>> sameChars('abcd', 'dddddddabce')\n     * False\n     * >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n     * False\n     */\n\n    return new Set(s0).size === new Set(s1).size && [...new Set(s0)].every(char => new Set(s1).has(char));\n}"}
{"task_id": "HumanEval/55", "translation": "function fib(n: number): number {\n    /**\n     * Return n-th Fibonacci number.\n     * Examples:\n     * fib(10) -> 55\n     * fib(1) -> 1\n     * fib(8) -> 21\n     */\n\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}"}
{"task_id": "HumanEval/56", "translation": "function correctBracketing(brackets: string): boolean {\n    /**\n     * brackets is a string of \"<\" and \">\".\n     * return True if every opening bracket has a corresponding closing bracket.\n     * \n     * Examples:\n     * console.log(correctBracketing(\"<\")); // False\n     * console.log(correctBracketing(\"<>\")); // True\n     * console.log(correctBracketing(\"<<><>>\")); // True\n     * console.log(correctBracketing(\"><<>\")); // False\n     */\n\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"<\") {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}"}
{"task_id": "HumanEval/57", "translation": "function monotonic(l: number[]): boolean {\n    /**\n     * Return True if list elements are monotonically increasing or decreasing.\n     * \n     * Examples:\n     * monotonic([1, 2, 4, 20]); // true\n     * monotonic([1, 20, 4, 10]); // false\n     * monotonic([4, 1, 0, -10]); // true\n     */\n    \n    const sortedAsc = [...l].sort((a, b) => a - b);\n    const sortedDesc = [...l].sort((a, b) => b - a);\n\n    if (l.every((value, index) => value === sortedAsc[index]) || l.every((value, index) => value === sortedDesc[index])) {\n        return true;\n    }\n    return false;\n}"}
{"task_id": "HumanEval/58", "translation": "function common(l1: number[], l2: number[]): number[] {\n    /** \n     * Return sorted unique common elements for two lists.\n     * // Example usage:\n     * console.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\n     * // Output: [1, 5, 653]\n     * console.log(common([5, 3, 2, 8], [3, 2]));\n     * // Output: [2, 3]\n     */\n\n    const ret = new Set<number>();\n    for (const e1 of l1) {\n        for (const e2 of l2) {\n            if (e1 === e2) {\n                ret.add(e1);\n            }\n        }\n    }\n    return Array.from(ret).sort((a, b) => a - b);\n}"}
{"task_id": "HumanEval/59", "translation": "function largestPrimeFactor(n: number): number {\n    /**\n     * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n     * @example\n     * largestPrimeFactor(13195) // 29\n     * largestPrimeFactor(2048) // 2\n     */\n\n    function isPrime(k: number): boolean {\n        if (k < 2) {\n            return false;\n        }\n        for (let i = 2; i < k - 1; i++) {\n            if (k % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    let largest = 1;\n    for (let j = 2; j <= n; j++) {\n        if (n % j === 0 && isPrime(j)) {\n            largest = Math.max(largest, j);\n        }\n    }\n    return largest;\n}"}
{"task_id": "HumanEval/60", "translation": "function sumToN(n: number): number {\n    /**\n     * sumToN is a function that sums numbers from 1 to n.\n     * // sumToN(30) => 465\n     * // sumToN(100) => 5050\n     * // sumToN(5) => 15\n     * // sumToN(10) => 55\n     * // sumToN(1) => 1\n     */\n\n    return Array.from({length: n + 1}, (_, i) => i).reduce((acc, val) => acc + val, 0);\n}"}
{"task_id": "HumanEval/61", "translation": "function correctBracketing(brackets: string): boolean {\n    /**\n     * brackets is a string of \"(\" and \")\".\n     * return True if every opening bracket has a corresponding closing bracket.\n     *\n     * Examples:\n     * console.log(correctBracketing(\"(\")); // False\n     * console.log(correctBracketing(\"()\")); // True\n     * console.log(correctBracketing(\"(()())\")); // True\n     * console.log(correctBracketing(\")(()\")); // False\n     */\n\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"(\") {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}"}
{"task_id": "HumanEval/62", "translation": "function derivative(xs: number[]): number[] {\n    /**\n     * xs represent coefficients of a polynomial.\n     * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     * Return derivative of this polynomial in the same form.\n     * \n     * Example:\n     * derivative([3, 1, 2, 4, 5]) -> [1, 4, 12, 20]\n     * derivative([1, 2, 3]) -> [2, 6]\n     */\n    return xs.map((x, i) => i * x).slice(1);\n}"}
{"task_id": "HumanEval/63", "translation": "function fibfib(n: number): number {\n    /**\n     * The FibFib number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n     * fibfib(0) == 0\n     * fibfib(1) == 0\n     * fibfib(2) == 1\n     * fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n     * Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n     * \n     * Example:\n     * fibfib(1) // 0\n     * fibfib(5) // 4\n     * fibfib(8) // 24\n     */\n\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}"}
{"task_id": "HumanEval/64", "translation": "const FIX = `\nAdd more test cases.\n`;\n\nfunction vowels_count(s: string): number {\n    /**\n     * Write a function vowels_count which takes a string representing\n     * a word as input and returns the number of vowels in the string.\n     * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n     * vowel, but only when it is at the end of the given word.\n     *\n     * Example:\n     * console.log(vowels_count(\"abcde\"));\n     * // 2\n     * console.log(vowels_count(\"ACEDY\"));\n     * // 3\n     */\n\n    const vowels = \"aeiouAEIOU\";\n    let n_vowels = Array.from(s).reduce((count, c) => count + (vowels.includes(c) ? 1 : 0), 0);\n    if (s[s.length - 1] === 'y' || s[s.length - 1] === 'Y') {\n        n_vowels += 1;\n    }\n    return n_vowels;\n}"}
{"task_id": "HumanEval/65", "translation": "function circularShift(x: number, shift: number): string {\n    /**\n     * Circular shift the digits of the integer x, shift the digits right by shift\n     * and return the result as a string.\n     * If shift > number of digits, return digits reversed.\n     * @example\n     * circularShift(12, 1); // \"21\"\n     * circularShift(12, 2); // \"12\"\n     */\n    \n    const s = x.toString();\n    if (shift > s.length) {\n        return s.split('').reverse().join('');\n    } else {\n        return s.slice(s.length - shift) + s.slice(0, s.length - shift);\n    }\n}"}
{"task_id": "HumanEval/66", "translation": "function digitSum(s: string): number {\n    /**\n     * Task\n     * Write a function that takes a string as input and returns the sum of the upper characters only'\n     * ASCII codes.\n     *\n     * Examples:\n     *     digitSum(\"\") => 0\n     *     digitSum(\"abAB\") => 131\n     *     digitSum(\"abcCd\") => 67\n     *     digitSum(\"helloE\") => 69\n     *     digitSum(\"woArBld\") => 131\n     *     digitSum(\"aAaaaXa\") => 153\n     */\n\n    if (s === \"\") return 0;\n    \n    return Array.from(s).reduce((acc, char) => {\n        return acc + (char === char.toUpperCase() ? char.charCodeAt(0) : 0);\n    }, 0);\n}"}
{"task_id": "HumanEval/67", "translation": "function fruit_distribution(s: string, n: number): number {\n    /**\n     * In this task, you will be given a string that represents a number of apples and oranges \n     * that are distributed in a basket of fruit this basket contains \n     * apples, oranges, and mango fruits. Given the string that represents the total number of \n     * the oranges and apples and an integer that represent the total number of the fruits \n     * in the basket return the number of the mango fruits in the basket.\n     * for example:\n     * fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n     * fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n     * fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n     * fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n\n    const lis: number[] = [];\n    for (const i of s.split(' ')) {\n        if (!isNaN(Number(i))) {\n            lis.push(Number(i));\n        }\n    }\n    return n - lis.reduce((acc, val) => acc + val, 0);\n}"}
{"task_id": "HumanEval/68", "translation": "function pluck(arr: number[]): [number, number] | [] {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    */\n\n    if (arr.length === 0) return [];\n    const evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n    const minEven = Math.min(...evens);\n    return [minEven, arr.indexOf(minEven)];\n}"}
{"task_id": "HumanEval/69", "translation": "function search(lst: number[]): number {\n    /**\n     * You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n     * zero, and has a frequency greater than or equal to the value of the integer itself. \n     * The frequency of an integer is the number of times it appears in the list.\n     * If no such a value exist, return -1.\n     * Examples:\n     *     search([4, 1, 2, 2, 3, 1]) == 2\n     *     search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n     *     search([5, 5, 4, 4, 4]) == -1\n     */\n    \n    const maxVal = Math.max(...lst);\n    const frq = new Array(maxVal + 1).fill(0);\n    \n    for (const num of lst) {\n        frq[num] += 1;\n    }\n\n    let ans = -1;\n    for (let i = 1; i < frq.length; i++) {\n        if (frq[i] >= i) {\n            ans = i;\n        }\n    }\n\n    return ans;\n}"}
{"task_id": "HumanEval/70", "translation": "function strangeSortList(lst: number[]): number[] {\n    /**\n     * Given list of integers, return list in strange order.\n     * Strange sorting, is when you start with the minimum value,\n     * then maximum of the remaining integers, then minimum and so on.\n     *\n     * Examples:\n     * strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n     * strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n     * strangeSortList([]) == []\n     */\n\n    let res: number[] = [];\n    let switchFlag = true;\n\n    while (lst.length > 0) {\n        if (switchFlag) {\n            const minVal = Math.min(...lst);\n            res.push(minVal);\n            lst.splice(lst.indexOf(minVal), 1);\n        } else {\n            const maxVal = Math.max(...lst);\n            res.push(maxVal);\n            lst.splice(lst.indexOf(maxVal), 1);\n        }\n        switchFlag = !switchFlag;\n    }\n\n    return res;\n}"}
{"task_id": "HumanEval/71", "translation": "function triangleArea(a: number, b: number, c: number): number {\n    /*\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n    */\n\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n\n    const s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    area = Math.round(area * 100) / 100;\n    return area;\n}"}
{"task_id": "HumanEval/72", "translation": "function will_it_fly(q: number[], w: number): boolean {\n    /**\n     * Write a function that returns True if the object q will fly, and False otherwise.\n     * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n     * \n     * Example:\n     * will_it_fly([1, 2], 5) \u279e False \n     * // 1+2 is less than the maximum possible weight, but it's unbalanced.\n     * \n     * will_it_fly([3, 2, 3], 1) \u279e False\n     * // it's balanced, but 3+2+3 is more than the maximum possible weight.\n     * \n     * will_it_fly([3, 2, 3], 9) \u279e True\n     * // 3+2+3 is less than the maximum possible weight, and it's balanced.\n     * \n     * will_it_fly([3], 5) \u279e True\n     * // 3 is less than the maximum possible weight, and it's balanced.\n     */\n\n    if (q.reduce((a, b) => a + b, 0) > w) {\n        return false;\n    }\n\n    let i = 0;\n    let j = q.length - 1;\n    while (i < j) {\n        if (q[i] !== q[j]) {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}"}
{"task_id": "HumanEval/73", "translation": "function smallestChange(arr: number[]): number {\n    /**\n     * Given an array arr of integers, find the minimum number of elements that\n     * need to be changed to make the array palindromic. A palindromic array is an array that\n     * is read the same backwards and forwards. In one change, you can change one element to any other element.\n     *\n     * For example:\n     * smallestChange([1,2,3,5,4,7,9,6]) == 4\n     * smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n     * smallestChange([1, 2, 3, 2, 1]) == 0\n     */\n    \n    let ans = 0;\n    for (let i = 0; i < Math.floor(arr.length / 2); i++) {\n        if (arr[i] !== arr[arr.length - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}"}
{"task_id": "HumanEval/74", "translation": "function total_match(lst1: string[], lst2: string[]): string[] {\n    /*\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    */\n\n    let l1 = 0;\n    for (const st of lst1) {\n        l1 += st.length;\n    }\n\n    let l2 = 0;\n    for (const st of lst2) {\n        l2 += st.length;\n    }\n\n    if (l1 <= l2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}"}
{"task_id": "HumanEval/75", "translation": "function isMultiplyPrime(a: number): boolean {\n    /**\n     * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n     * and false otherwise.\n     * Knowing that (a) is less than 100.\n     * Example:\n     * isMultiplyPrime(30) == true\n     * 30 = 2 * 3 * 5\n     */\n\n    function isPrime(n: number): boolean {\n        for (let j = 2; j < n; j++) {\n            if (n % j === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    for (let i = 2; i < 101; i++) {\n        if (!isPrime(i)) continue;\n        for (let j = 2; j < 101; j++) {\n            if (!isPrime(j)) continue;\n            for (let k = 2; k < 101; k++) {\n                if (!isPrime(k)) continue;\n                if (i * j * k === a) return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "HumanEval/76", "translation": "function isSimplePower(x: number, n: number): boolean {\n    /**\n     * Your task is to write a function that returns true if a number x is a simple\n     * power of n and false in other cases.\n     * x is a simple power of n if n**int=x\n     * For example:\n     * is_simple_power(1, 4) => true\n     * is_simple_power(2, 2) => true\n     * is_simple_power(8, 2) => true\n     * is_simple_power(3, 2) => false\n     * is_simple_power(3, 1) => false\n     * is_simple_power(5, 3) => false\n     */\n\n    if (n === 1) {\n        return x === 1;\n    }\n    let power = 1;\n    while (power < x) {\n        power = power * n;\n    }\n    return power === x;\n}"}
{"task_id": "HumanEval/77", "translation": "function isCube(a: number): boolean {\n    /**\n     * Write a function that takes an integer a and returns True \n     * if this integer is a cube of some integer number.\n     * Note: you may assume the input is always valid.\n     * Examples:\n     * isCube(1) ==> True\n     * isCube(2) ==> False\n     * isCube(-1) ==> True\n     * isCube(64) ==> True\n     * isCube(0) ==> True\n     * isCube(180) ==> False\n     */\n\n    a = Math.abs(a);\n    return Math.pow(Math.round(Math.pow(a, 1 / 3)), 3) === a;\n}"}
{"task_id": "HumanEval/78", "translation": "function hexKey(num: string): number {\n    /**\n     * You have been tasked to write a function that receives \n     * a hexadecimal number as a string and counts the number of hexadecimal \n     * digits that are primes (prime number, or a prime, is a natural number \n     * greater than 1 that is not a product of two smaller natural numbers).\n     * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n     * Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n     * So you have to determine a number of the following digits: 2, 3, 5, 7, \n     * B (=decimal 11), D (=decimal 13).\n     * Note: you may assume the input is always correct or empty string, \n     * and symbols A,B,C,D,E,F are always uppercase.\n     * Examples:\n     * For num = \"AB\" the output should be 1.\n     * For num = \"1077E\" the output should be 2.\n     * For num = \"ABED1A33\" the output should be 4.\n     * For num = \"123456789ABCDEF0\" the output should be 6.\n     * For num = \"2020\" the output should be 2.\n     */\n\n    const primes: Set<string> = new Set(['2', '3', '5', '7', 'B', 'D']);\n    let total: number = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.has(num[i])) {\n            total += 1;\n        }\n    }\n    return total;\n}"}
{"task_id": "HumanEval/79", "translation": "function decimalToBinary(decimal: number): string {\n    /**\n     * You will be given a number in decimal form and your task is to convert it to\n     * binary format. The function should return a string, with each character representing a binary\n     * number. Each character in the string will be '0' or '1'.\n     * \n     * There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n     * The extra characters are there to help with the format.\n     * \n     * Examples:\n     * decimalToBinary(15)   // returns \"db1111db\"\n     * decimalToBinary(32)   // returns \"db100000db\"\n     */\n\n    return \"db\" + decimal.toString(2) + \"db\";\n}"}
{"task_id": "HumanEval/80", "translation": "function is_happy(s: string): boolean {\n    /**\n     * You are given a string s.\n     * Your task is to check if the string is happy or not.\n     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n     * For example:\n     * is_happy(a) => False\n     * is_happy(aa) => False\n     * is_happy(abcd) => True\n     * is_happy(aabb) => False\n     * is_happy(adb) => True\n     * is_happy(xyy) => False\n     */\n\n    if (s.length < 3) {\n        return false;\n    }\n\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i + 1] === s[i + 2] || s[i] === s[i + 2]) {\n            return false;\n        }\n    }\n\n    return true;\n}"}
{"task_id": "HumanEval/81", "translation": "function numericalLetterGrade(grades: number[]): string[] {\n    /**\n     * It is the last week of the semester and the teacher has to give the grades\n     * to students. The teacher has been making her own algorithm for grading.\n     * The only problem is, she has lost the code she used for grading.\n     * She has given you a list of GPAs for some students and you have to write \n     * a function that can output a list of letter grades using the following table:\n     *      GPA       |    Letter grade\n     *       4.0                A+\n     *     > 3.7                A \n     *     > 3.3                A- \n     *     > 3.0                B+\n     *     > 2.7                B \n     *     > 2.3                B-\n     *     > 2.0                C+\n     *     > 1.7                C\n     *     > 1.3                C-\n     *     > 1.0                D+ \n     *     > 0.7                D \n     *     > 0.0                D-\n     *       0.0                E\n     * \n     * Example:\n     * numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n     */\n\n    const letterGrade: string[] = [];\n    \n    for (const gpa of grades) {\n        if (gpa === 4.0) {\n            letterGrade.push(\"A+\");\n        } else if (gpa > 3.7) {\n            letterGrade.push(\"A\");\n        } else if (gpa > 3.3) {\n            letterGrade.push(\"A-\");\n        } else if (gpa > 3.0) {\n            letterGrade.push(\"B+\");\n        } else if (gpa > 2.7) {\n            letterGrade.push(\"B\");\n        } else if (gpa > 2.3) {\n            letterGrade.push(\"B-\");\n        } else if (gpa > 2.0) {\n            letterGrade.push(\"C+\");\n        } else if (gpa > 1.7) {\n            letterGrade.push(\"C\");\n        } else if (gpa > 1.3) {\n            letterGrade.push(\"C-\");\n        } else if (gpa > 1.0) {\n            letterGrade.push(\"D+\");\n        } else if (gpa > 0.7) {\n            letterGrade.push(\"D\");\n        } else if (gpa > 0.0) {\n            letterGrade.push(\"D-\");\n        } else {\n            letterGrade.push(\"E\");\n        }\n    }\n    \n    return letterGrade;\n}"}
{"task_id": "HumanEval/82", "translation": "function primeLength(str: string): boolean {\n    /**\n     * Write a function that takes a string and returns True if the string\n     * length is a prime number or False otherwise\n     * Examples\n     * primeLength('Hello') == True\n     * primeLength('abcdcba') == True\n     * primeLength('kittens') == True\n     * primeLength('orange') == False\n     */\n\n    const l = str.length;\n    if (l === 0 || l === 1) {\n        return false;\n    }\n    for (let i = 2; i < l; i++) {\n        if (l % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval/83", "translation": "function startsOneEnds(n: number): number {\n    /**\n     * Given a positive integer n, return the count of the numbers of n-digit\n     * positive integers that start or end with 1.\n     */\n\n    if (n === 1) return 1;\n    return 18 * Math.pow(10, n - 2);\n}"}
{"task_id": "HumanEval/84", "translation": "function solve(N: number): string {\n    /**\n     * Given a positive integer N, return the total sum of its digits in binary.\n     * \n     * Example:\n     * For N = 1000, the sum of digits will be 1 the output should be \"1\".\n     * For N = 150, the sum of digits will be 6 the output should be \"110\".\n     * For N = 147, the sum of digits will be 12 the output should be \"1100\".\n     * \n     * Variables:\n     * @N integer\n     *      Constraints: 0 \u2264 N \u2264 10000.\n     * Output:\n     *      a string of binary number\n     */\n\n    return (N.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0)).toString(2);\n}"}
{"task_id": "HumanEval/85", "translation": "function add(lst: number[]): number {\n    /**\n     * Given a non-empty list of integers lst, add the even elements that are at odd indices.\n     *\n     * Examples:\n     *     add([4, 2, 6, 7]) ==> 2 \n     */\n    \n    return lst.filter((_, i) => i % 2 !== 0 && lst[i] % 2 === 0)\n              .reduce((acc, curr) => acc + curr, 0);\n}"}
{"task_id": "HumanEval/86", "translation": "function antiShuffle(s: string): string {\n    /**\n     * Write a function that takes a string and returns an ordered version of it.\n     * Ordered version of string, is a string where all words (separated by space)\n     * are replaced by a new word where all the characters arranged in\n     * ascending order based on ascii value.\n     * Note: You should keep the order of words and blank spaces in the sentence.\n     *\n     * For example:\n     * antiShuffle('Hi') returns 'Hi'\n     * antiShuffle('hello') returns 'ehllo'\n     * antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n     */\n\n    return s.split(' ')\n        .map(word => word.split('')\n        .sort()\n        .join(''))\n        .join(' ');\n}"}
{"task_id": "HumanEval/87", "translation": "function getRow(lst: number[][], x: number): [number, number][] {\n    /**\n     * You are given a 2 dimensional data, as a nested lists,\n     * which is similar to matrix, however, unlike matrices,\n     * each row may contain a different number of columns.\n     * Given lst, and integer x, find integers x in the list,\n     * and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n     * each tuple is a coordinate - (row, columns), starting with 0.\n     * Sort coordinates initially by rows in ascending order.\n     * Also, sort coordinates of the row by columns in descending order.\n     * \n     * Examples:\n     * get_row([\n     *   [1,2,3,4,5,6],\n     *   [1,2,3,4,1,6],\n     *   [1,2,3,4,5,1]\n     * ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n     * get_row([], 1) == []\n     * get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n     */\n    \n    let coords: [number, number][] = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                coords.push([i, j]);\n            }\n        }\n    }\n    \n    return coords.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}"}
{"task_id": "HumanEval/88", "translation": "function sortArray(array: number[]): number[] {\n    /**\n     * Given an array of non-negative integers, return a copy of the given array after sorting,\n     * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n     * or sort it in descending order if the sum( first index value, last index value) is even.\n     *\n     * Note:\n     * * don't change the given array.\n     *\n     * Examples:\n     * * sortArray([]) => []\n     * * sortArray([5]) => [5]\n     * * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n     * * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    \n    if (array.length === 0) {\n        return [];\n    }\n\n    const shouldSortDescending = (array[0] + array[array.length - 1]) % 2 === 0;\n    return [...array].sort((a, b) => shouldSortDescending ? b - a : a - b);\n}"}
{"task_id": "HumanEval/89", "translation": "function encrypt(s: string): string {\n    /**\n     * Create a function encrypt that takes a string as an argument and\n     * returns a string encrypted with the alphabet being rotated. \n     * The alphabet should be rotated in a manner such that the letters \n     * shift down by two multiplied to two places.\n     * For example:\n     * encrypt('hi') returns 'lm'\n     * encrypt('asdfghjkl') returns 'ewhjklnop'\n     * encrypt('gf') returns 'kj'\n     * encrypt('et') returns 'ix'\n     */\n\n    const d = 'abcdefghijklmnopqrstuvwxyz';\n    let out = '';\n    for (const c of s) {\n        if (d.includes(c)) {\n            out += d[(d.indexOf(c) + 2 * 2) % 26];\n        } else {\n            out += c;\n        }\n    }\n    return out;\n}"}
{"task_id": "HumanEval/90", "translation": "function nextSmallest(lst: number[]): number | null {\n    /**\n     * You are given a list of integers.\n     * Write a function nextSmallest() that returns the 2nd smallest element of the list.\n     * Return None if there is no such element.\n     * \n     * nextSmallest([1, 2, 3, 4, 5]) == 2\n     * nextSmallest([5, 1, 4, 3, 2]) == 2\n     * nextSmallest([]) == null\n     * nextSmallest([1, 1]) == null\n     */\n\n    const uniqueSorted = Array.from(new Set(lst)).sort((a, b) => a - b);\n    return uniqueSorted.length < 2 ? null : uniqueSorted[1];\n}"}
{"task_id": "HumanEval/91", "translation": "function is_bored(S: string): number {\n    /**\n     * You'll be given a string of words, and your task is to count the number\n     * of boredoms. A boredom is a sentence that starts with the word \"I\".\n     * Sentences are delimited by '.', '?' or '!'.\n     *\n     * For example:\n     * >>> is_bored(\"Hello world\")\n     * 0\n     * >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n     * 1\n     */\n    \n    const sentences = S.split(/[.?!]\\s*/);\n    return sentences.reduce((count, sentence) => count + (sentence.startsWith('I ') ? 1 : 0), 0);\n}"}
{"task_id": "HumanEval/92", "translation": "function anyInt(x: number, y: number, z: number): boolean {\n    /*\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    anyInt(5, 2, 7) \u279e True\n    \n    anyInt(3, 2, 2) \u279e False\n\n    anyInt(3, -2, 1) \u279e True\n    \n    anyInt(3.6, -2.2, 2) \u279e False\n    */\n\n    if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n        if ((x + y === z) || (x + z === y) || (y + z === x)) {\n            return true;\n        }\n        return false;\n    }\n    return false;\n}"}
{"task_id": "HumanEval/93", "translation": "function encode(message: string): string {\n    /**\n     * Write a function that takes a message, and encodes in such a \n     * way that it swaps case of all letters, replaces all vowels in \n     * the message with the letter that appears 2 places ahead of that \n     * vowel in the english alphabet. \n     * Assume only letters. \n     * \n     * Examples:\n     * encode('test')\n     * 'TGST'\n     * encode('This is a message')\n     * 'tHKS KS C MGSSCGG'\n     */\n\n    const vowels = \"aeiouAEIOU\";\n    const vowelsReplace: { [key: string]: string } = {};\n\n    for (const char of vowels) {\n        vowelsReplace[char] = String.fromCharCode(char.charCodeAt(0) + 2);\n    }\n\n    message = message.split('').map(char => {\n        const swappedChar = char === char.toLowerCase() ? char.toUpperCase() : char.toLowerCase();\n        return vowelsReplace[swappedChar] || swappedChar;\n    }).join('');\n\n    return message;\n}"}
{"task_id": "HumanEval/94", "translation": "function skjkasdkd(lst: number[]): number {\n    /**\n     * You are given a list of integers.\n     * You need to find the largest prime value and return the sum of its digits.\n     *\n     * Examples:\n     * For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n     * For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n     * For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n     * For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n     * For lst = [0,81,12,3,1,21] the output should be 3\n     * For lst = [0,8,1,2,1,7] the output should be 7\n     */\n\n    function isPrime(n: number): boolean {\n        for (let i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    let maxx = 0;\n    let i = 0;\n    while (i < lst.length) {\n        if (lst[i] > maxx && isPrime(lst[i])) {\n            maxx = lst[i];\n        }\n        i += 1;\n    }\n\n    const result = Array.from(String(maxx), Number).reduce((a, b) => a + b, 0);\n    return result;\n}"}
{"task_id": "HumanEval/95", "translation": "function checkDictCase(dict: Record<string | number, any>): boolean {\n    /**\n     * Given a dictionary, return True if all keys are strings in lower \n     * case or all keys are strings in upper case, else return False.\n     * The function should return False is the given dictionary is empty.\n     * Examples:\n     * checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n     * checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n     * checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n     * checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n     * checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n\n    const keys = Object.keys(dict);\n\n    if (keys.length === 0) {\n        return false;\n    } else {\n        let state = \"start\";\n        for (const key of keys) {\n            if (typeof key !== \"string\") {\n                state = \"mixed\";\n                break;\n            }\n            if (state === \"start\") {\n                if (key === key.toUpperCase()) {\n                    state = \"upper\";\n                } else if (key === key.toLowerCase()) {\n                    state = \"lower\";\n                } else {\n                    break;\n                }\n            } else if ((state === \"upper\" && key !== key.toUpperCase()) || (state === \"lower\" && key !== key.toLowerCase())) {\n                state = \"mixed\";\n                break;\n            } else {\n                break;\n            }\n        }\n        return state === \"upper\" || state === \"lower\";\n    }\n}"}
{"task_id": "HumanEval/96", "translation": "function countUpTo(n: number): number[] {\n    /**\n     * Implement a function that takes a non-negative integer and returns an array of the first n\n     * integers that are prime numbers and less than n.\n     * for example:\n     * countUpTo(5) => [2,3]\n     * countUpTo(11) => [2,3,5,7]\n     * countUpTo(0) => []\n     * countUpTo(20) => [2,3,5,7,11,13,17,19]\n     * countUpTo(1) => []\n     * countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    \n    const primes: number[] = [];\n    for (let i = 2; i < n; i++) {\n        let isPrime = true;\n        for (let j = 2; j < i; j++) {\n            if (i % j === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.push(i);\n        }\n    }\n    return primes;\n}"}
{"task_id": "HumanEval/97", "translation": "function multiply(a: number, b: number): number {\n    /**\n     * Complete the function that takes two integers and returns \n     * the product of their unit digits.\n     * Assume the input is always valid.\n     * Examples:\n     * multiply(148, 412) should return 16.\n     * multiply(19, 28) should return 72.\n     * multiply(2020, 1851) should return 0.\n     * multiply(14, -15) should return 20.\n     */\n    \n    return Math.abs(a % 10) * Math.abs(b % 10);\n}"}
{"task_id": "HumanEval/98", "translation": "function countUpper(s: string): number {\n    /**\n     * Given a string s, count the number of uppercase vowels in even indices.\n     * \n     * For example:\n     * countUpper('aBCdEf') returns 1\n     * countUpper('abcdefg') returns 0\n     * countUpper('dBBE') returns 0\n     */\n    \n    let count = 0;\n    for (let i = 0; i < s.length; i += 2) {\n        if (\"AEIOU\".includes(s[i])) {\n            count += 1;\n        }\n    }\n    return count;\n}"}
{"task_id": "HumanEval/99", "translation": "function closestInteger(value: string): number {\n    /*\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    */\n\n    if (value.includes('.')) {\n        // remove trailing zeros\n        while (value.endsWith('0')) {\n            value = value.slice(0, -1);\n        }\n    }\n\n    const num = parseFloat(value);\n    if (value.endsWith('.5')) {\n        if (num > 0) {\n            return Math.ceil(num);\n        } else {\n            return Math.floor(num);\n        }\n    } else if (value.length > 0) {\n        return Math.round(num);\n    } else {\n        return 0;\n    }\n}"}
{"task_id": "HumanEval/100", "translation": "function makeAPile(n: number): number[] {\n    /**\n     * Given a positive integer n, you have to make a pile of n levels of stones.\n     * The first level has n stones.\n     * The number of stones in the next level is:\n     *     - the next odd number if n is odd.\n     *     - the next even number if n is even.\n     * Return the number of stones in each level in a list, where element at index\n     * i represents the number of stones in the level (i+1).\n     *\n     * Examples:\n     * >>> makeAPile(3)\n     * [3, 5, 7]\n     */\n\n    const result: number[] = [];\n    for (let i = 0; i < n; i++) {\n        result.push(n + 2 * i);\n    }\n    return result;\n}"}
{"task_id": "HumanEval/101", "translation": "function wordsString(s: string): string[] {\n    /**\n     * You will be given a string of words separated by commas or spaces. Your task is\n     * to split the string into words and return an array of the words.\n     * \n     * For example:\n     * wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n     * wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n\n    if (!s) {\n        return [];\n    }\n\n    let sList: string[] = [];\n\n    for (let letter of s) {\n        if (letter === ',') {\n            sList.push(' ');\n        } else {\n            sList.push(letter);\n        }\n    }\n\n    sList = sList.join('');\n    return sList.split(/\\s+/);\n}"}
{"task_id": "HumanEval/102", "translation": "function chooseNum(x: number, y: number): number {\n    /**\n     * This function takes two positive numbers x and y and returns the\n     * biggest even integer number that is in the range [x, y] inclusive. If \n     * there's no such number, then the function should return -1.\n     *\n     * For example:\n     * chooseNum(12, 15) = 14\n     * chooseNum(13, 12) = -1\n     */\n\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    if (x === y) {\n        return -1;\n    }\n    return y - 1;\n}"}
{"task_id": "HumanEval/103", "translation": "function roundedAvg(n: number, m: number): string | number {\n    /**\n     * You are given two positive integers n and m, and your task is to compute the\n     * average of the integers from n through m (including n and m).\n     * Round the answer to the nearest integer and convert that to binary.\n     * If n is greater than m, return -1.\n     * Example:\n     * roundedAvg(1, 5) => \"0b11\"\n     * roundedAvg(7, 5) => -1\n     * roundedAvg(10, 20) => \"0b1111\"\n     * roundedAvg(20, 33) => \"0b11010\"\n     */\n\n    if (m < n) {\n        return -1;\n    }\n    let summation = 0;\n    for (let i = n; i <= m; i++) {\n        summation += i;\n    }\n    return `0b${Math.round(summation / (m - n + 1)).toString(2)}`;\n}"}
{"task_id": "HumanEval/104", "translation": "function uniqueDigits(x: number[]): number[] {\n    /**\n     * Given a list of positive integers x, return a sorted list of all \n     * elements that haven't any even digit.\n     * \n     * Note: Returned list should be sorted in increasing order.\n     * \n     * For example:\n     * uniqueDigits([15, 33, 1422, 1])\n     * // [1, 15, 33]\n     * uniqueDigits([152, 323, 1422, 10])\n     * // []\n     */\n\n    const oddDigitElements: number[] = [];\n    for (const i of x) {\n        if (Array.from(String(i)).every(c => parseInt(c) % 2 === 1)) {\n            oddDigitElements.push(i);\n        }\n    }\n    return oddDigitElements.sort((a, b) => a - b);\n}"}
{"task_id": "HumanEval/105", "translation": "function byLength(arr: number[]): string[] {\n    /**\n     * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n     * reverse the resulting array, and then replace each digit by its corresponding name from\n     * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n     *\n     * For example:\n     *   arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n     *         -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n     *         -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n     *   return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n     * \n     *   If the array is empty, return an empty array:\n     *   arr = []\n     *   return []\n     * \n     *   If the array has any strange number ignore it:\n     *   arr = [1, -1 , 55] \n     *         -> sort arr -> [-1, 1, 55]\n     *         -> reverse arr -> [55, 1, -1]\n     *   return = ['One']\n     */\n\n    const dic: { [key: number]: string } = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    };\n\n    const sortedArr = arr.sort((a, b) => b - a);\n    const newArr: string[] = [];\n    \n    for (const varNum of sortedArr) {\n        if (dic.hasOwnProperty(varNum)) {\n            newArr.push(dic[varNum]);\n        }\n    }\n    \n    return newArr;\n}"}
{"task_id": "HumanEval/106", "translation": "function f(n: number): number[] {\n    /**\n     * Implement the function f that takes n as a parameter,\n     * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n     * or the sum of numbers from 1 to i otherwise.\n     * i starts from 1.\n     * the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n     * Example:\n     * f(5) == [1, 2, 6, 24, 15]\n     */\n\n    let ret: number[] = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            let x = 1;\n            for (let j = 1; j <= i; j++) x *= j;\n            ret.push(x);\n        } else {\n            let x = 0;\n            for (let j = 1; j <= i; j++) x += j;\n            ret.push(x);\n        }\n    }\n    return ret;\n}"}
{"task_id": "HumanEval/107", "translation": "function evenOddPalindrome(n: number): [number, number] {\n    /**\n     * Given a positive integer n, return a tuple that has the number of even and odd\n     * integer palindromes that fall within the range(1, n), inclusive.\n     *\n     * Example 1:\n     *\n     *     Input: 3\n     *     Output: [1, 2]\n     *     Explanation:\n     *     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n     *\n     * Example 2:\n     *\n     *     Input: 12\n     *     Output: [4, 6]\n     *     Explanation:\n     *     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n     *\n     * Note:\n     *     1. 1 <= n <= 10^3\n     *     2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    \n    function isPalindrome(num: number): boolean {\n        return num.toString() === num.toString().split('').reverse().join('');\n    }\n\n    let evenPalindromeCount = 0;\n    let oddPalindromeCount = 0;\n\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 1 && isPalindrome(i)) {\n            oddPalindromeCount += 1;\n        } else if (i % 2 === 0 && isPalindrome(i)) {\n            evenPalindromeCount += 1;\n        }\n    }\n\n    return [evenPalindromeCount, oddPalindromeCount];\n}"}
{"task_id": "HumanEval/108", "translation": "function countNums(arr: number[]): number {\n    /**\n     * Write a function countNums which takes an array of integers and returns\n     * the number of elements which has a sum of digits > 0.\n     * If a number is negative, then its first signed digit will be negative:\n     * e.g. -123 has signed digits -1, 2, and 3.\n     * >>> countNums([]) == 0\n     * >>> countNums([-1, 11, -11]) == 1\n     * >>> countNums([1, 1, 2]) == 3\n     */\n\n    function digitsSum(n: number): number {\n        let neg = 1;\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        let digits = n.toString().split('').map(Number);\n        digits[0] = digits[0] * neg;\n        return digits.reduce((acc, num) => acc + num, 0);\n    }\n\n    return arr.filter(i => digitsSum(i) > 0).length;\n}"}
{"task_id": "HumanEval/109", "translation": "function moveOneBall(arr: number[]): boolean {\n    /**\n     * We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n     * numbers in the array will be randomly ordered. Your task is to determine if\n     * it is possible to get an array sorted in non-decreasing order by performing \n     * the following operation on the given array:\n     *     You are allowed to perform right shift operation any number of times.\n     * \n     * One right shift operation means shifting all elements of the array by one\n     * position in the right direction. The last element of the array will be moved to\n     * the starting position in the array i.e. 0th index. \n     * \n     * If it is possible to obtain the sorted array by performing the above operation\n     * then return True else return False.\n     * If the given array is empty then return True.\n     * \n     * Note: The given list is guaranteed to have unique elements.\n     * \n     * For Example:\n     * \n     * moveOneBall([3, 4, 5, 1, 2])==>True\n     * Explanation: By performing 2 right shift operations, non-decreasing order can\n     *              be achieved for the given array.\n     * moveOneBall([3, 5, 4, 1, 2])==>False\n     * Explanation: It is not possible to get non-decreasing order for the given\n     *              array by performing any number of right shift operations.\n     */\n\n    if (arr.length === 0) {\n        return true;\n    }\n\n    const sortedArray = [...arr].sort((a, b) => a - b);\n    const minValue = Math.min(...arr);\n    const minIndex = arr.indexOf(minValue);\n    const myArr = arr.slice(minIndex).concat(arr.slice(0, minIndex));\n\n    for (let i = 0; i < arr.length; i++) {\n        if (myArr[i] !== sortedArray[i]) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval/110", "translation": "function exchange(lst1: number[], lst2: number[]): string {\n    let odd = 0;\n    let even = 0;\n\n    for (let i of lst1) {\n        if (i % 2 === 1) {\n            odd += 1;\n        }\n    }\n    for (let i of lst2) {\n        if (i % 2 === 0) {\n            even += 1;\n        }\n    }\n\n    if (even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}"}
{"task_id": "HumanEval/111", "translation": "function histogram(test: string): { [key: string]: number } {\n    /**\n     * Given a string representing a space separated lowercase letters, return a dictionary\n     * of the letter with the most repetition and containing the corresponding count.\n     * If several letters have the same occurrence, return all of them.\n     * \n     * Example:\n     * histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n     * histogram('a b b a') == {'a': 2, 'b': 2}\n     * histogram('a b c a b') == {'a': 2, 'b': 2}\n     * histogram('b b b b a') == {'b': 4}\n     * histogram('') == {}\n     */\n\n    const dict1: { [key: string]: number } = {};\n    const list1: string[] = test.split(\" \");\n    let t: number = 0;\n\n    for (const i of list1) {\n        if (list1.filter(item => item === i).length > t && i !== '') {\n            t = list1.filter(item => item === i).length;\n        }\n    }\n    if (t > 0) {\n        for (const i of list1) {\n            if (list1.filter(item => item === i).length === t) {\n                dict1[i] = t;\n            }\n        }\n    }\n    return dict1;\n}"}
{"task_id": "HumanEval/112", "translation": "function reverseDelete(s: string, c: string): [string, boolean] {\n    /**\n     * Task\n     * We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n     * then check if the result string is palindrome.\n     * A string is called palindrome if it reads the same backward as forward.\n     * You should return a tuple containing the result string and True/False for the check.\n     * Example\n     * For s = \"abcde\", c = \"ae\", the result should be ['bcd', false]\n     * For s = \"abcdef\", c = \"b\"  the result should be ['acdef', false]\n     * For s = \"abcdedcba\", c = \"ab\", the result should be ['cdedc', true]\n     */\n\n    s = s.split('').filter(char => !c.includes(char)).join('');\n    return [s, s.split('').reverse().join('') === s];\n}"}
{"task_id": "HumanEval/113", "translation": "function oddCount(lst: string[]): string[] {\n    /**\n     * Given a list of strings, where each string consists of only digits, return a list.\n     * Each element i of the output should be \"the number of odd elements in the\n     * string i of the input.\" where all the i's should be replaced by the number\n     * of odd digits in the i'th string of the input.\n     *\n     * @example\n     * oddCount(['1234567'])\n     * // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n     * oddCount(['3',\"11111111\"])\n     * // [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     * //  \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n\n    const res: string[] = [];\n    for (const arr of lst) {\n        const n = Array.from(arr).reduce((acc, d) => acc + (parseInt(d) % 2 === 1 ? 1 : 0), 0);\n        res.push(`the number of odd elements ${n}n the str${n}ng ${n} of the ${n}nput.`);\n    }\n    return res;\n}"}
{"task_id": "HumanEval/114", "translation": "function minSubArraySum(nums: number[]): number {\n    /**\n     * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n     * of nums.\n     * Example\n     * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n     * minSubArraySum([-1, -2, -3]) == -6\n     */\n\n    let max_sum = 0;\n    let s = 0;\n    for (let num of nums) {\n        s += -num;\n        if (s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if (max_sum === 0) {\n        max_sum = Math.max(...nums.map(i => -i));\n    }\n    const min_sum = -max_sum;\n    return min_sum;\n}"}
{"task_id": "HumanEval/115", "translation": "function maxFill(grid: number[][], capacity: number): number {\n    return grid.reduce((total, row) => {\n        const rowSum = row.reduce((sum, value) => sum + value, 0);\n        return total + Math.ceil(rowSum / capacity);\n    }, 0);\n}"}
{"task_id": "HumanEval/116", "translation": "function sortArray(arr: number[]): number[] {\n    /**\n     * In this Kata, you have to sort an array of non-negative integers according to\n     * number of ones in their binary representation in ascending order.\n     * For similar number of ones, sort based on decimal value.\n     *\n     * It must be implemented like this:\n     * >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n     * >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n     * >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n     */\n\n    return arr.sort((a, b) => {\n        const aBinCount = a.toString(2).split('0').join('').length;\n        const bBinCount = b.toString(2).split('0').join('').length;\n        \n        if (aBinCount === bBinCount) {\n            return a - b;\n        }\n        return aBinCount - bBinCount;\n    });\n}"}
{"task_id": "HumanEval/117", "translation": "function selectWords(s: string, n: number): string[] {\n    /**\n     * Given a string s and a natural number n, you have been tasked to implement \n     * a function that returns a list of all words from string s that contain exactly \n     * n consonants, in order these words appear in the string s.\n     * If the string s is empty then the function should return an empty list.\n     * Note: you may assume the input string contains only letters and spaces.\n     * Examples:\n     * selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n     * selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n     * selectWords(\"simple white space\", 2) ==> []\n     * selectWords(\"Hello world\", 4) ==> [\"world\"]\n     * selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n\n    let result: string[] = [];\n    const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\n    for (const word of s.split(' ')) {\n        let nConsonants = 0;\n        for (const char of word) {\n            if (vowels.indexOf(char.toLowerCase()) === -1) {\n                nConsonants += 1;\n            }\n        }\n        if (nConsonants === n) {\n            result.push(word);\n        }\n    }\n    return result;\n}"}
{"task_id": "HumanEval/118", "translation": "function getClosestVowel(word: string): string {\n    /**\n     * You are given a word. Your task is to find the closest vowel that stands between \n     * two consonants from the right side of the word (case sensitive).\n     * \n     * Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n     * find any vowel met the above condition. \n     * \n     * You may assume that the given string contains English letter only.\n     * \n     * Example:\n     * get_closest_vowel(\"yogurt\") ==> \"u\"\n     * get_closest_vowel(\"FULL\") ==> \"U\"\n     * get_closest_vowel(\"quick\") ==> \"\"\n     * get_closest_vowel(\"ab\") ==> \"\"\n     */\n\n    if (word.length < 3) {\n        return \"\";\n    }\n\n    const vowels: Set<string> = new Set([\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"O\", \"U\", \"I\"]);\n    for (let i = word.length - 2; i > 0; i--) {\n        if (vowels.has(word[i])) {\n            if (!vowels.has(word[i + 1]) && !vowels.has(word[i - 1])) {\n                return word[i];\n            }\n        }\n    }\n    return \"\";\n}"}
{"task_id": "HumanEval/119", "translation": "function match_parens(lst: [string, string]): string {\n    /*\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    */\n\n    function check(s: string): boolean {\n        let val = 0;\n        for (const i of s) {\n            if (i === '(') {\n                val += 1;\n            } else {\n                val -= 1;\n            }\n            if (val < 0) {\n                return false;\n            }\n        }\n        return val === 0;\n    }\n\n    const S1 = lst[0] + lst[1];\n    const S2 = lst[1] + lst[0];\n    return check(S1) || check(S2) ? 'Yes' : 'No';\n}"}
{"task_id": "HumanEval/120", "translation": "function maximum(arr: number[], k: number): number[] {\n    /**\n     * Given an array arr of integers and a positive integer k, return a sorted list \n     * of length k with the maximum k numbers in arr.\n     *\n     * Example 1:\n     *\n     *     Input: arr = [-3, -4, 5], k = 3\n     *     Output: [-4, -3, 5]\n     *\n     * Example 2:\n     *\n     *     Input: arr = [4, -4, 4], k = 2\n     *     Output: [4, 4]\n     *\n     * Example 3:\n     *\n     *     Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n     *     Output: [2]\n     *\n     * Note:\n     *     1. The length of the array will be in the range of [1, 1000].\n     *     2. The elements in the array will be in the range of [-1000, 1000].\n     *     3. 0 <= k <= len(arr)\n     */\n\n    if (k === 0) {\n        return [];\n    }\n    arr.sort((a, b) => a - b);\n    const ans = arr.slice(-k);\n    return ans;\n}"}
{"task_id": "HumanEval/121", "translation": "function solution(lst: number[]): number {\n    /** Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    */\n\n    return lst.reduce((acc, x, idx) => (idx % 2 === 0 && x % 2 === 1) ? acc + x : acc, 0);\n}"}
{"task_id": "HumanEval/122", "translation": "function addElements(arr: number[], k: number): number {\n    /**\n     * Given a non-empty array of integers arr and an integer k, return\n     * the sum of the elements with at most two digits from the first k elements of arr.\n     * \n     * Example:\n     * \n     *     Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n     *     Output: 24 // sum of 21 + 3\n     * \n     * Constraints:\n     *     1. 1 <= arr.length <= 100\n     *     2. 1 <= k <= arr.length\n     */\n\n    return arr.slice(0, k).reduce((acc, elem) => {\n        return acc + (elem.toString().length <= 2 ? elem : 0);\n    }, 0);\n}"}
{"task_id": "HumanEval/123", "translation": "function getOddCollatz(n: number): number[] {\n    /**\n     * Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n     *\n     * The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n     * as follows: start with any positive integer n. Then each term is obtained from the \n     * previous term as follows: if the previous term is even, the next term is one half of \n     * the previous term. If the previous term is odd, the next term is 3 times the previous\n     * term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n     *\n     * Note: \n     *     1. Collatz(1) is [1].\n     *     2. returned list sorted in increasing order.\n     *\n     * For example:\n     * getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n\n    let oddCollatz: number[] = n % 2 === 0 ? [] : [n];\n    \n    while (n > 1) {\n        if (n % 2 === 0) {\n            n = n / 2;\n        } else {\n            n = n * 3 + 1;\n        }\n\n        if (n % 2 === 1) {\n            oddCollatz.push(n);\n        }\n    }\n\n    return oddCollatz.sort((a, b) => a - b);\n}"}
{"task_id": "HumanEval/124", "translation": "function valid_date(date: string): boolean {\n    /**\n     * You have to write a function which validates a given date string and\n     * returns True if the date is valid otherwise False.\n     * The date is valid if all of the following rules are satisfied:\n     * 1. The date string is not empty.\n     * 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n     * 3. The months should not be less than 1 or higher than 12.\n     * 4. The date should be in the format: mm-dd-yyyy\n     *\n     * for example:\n     * valid_date('03-11-2000') => true\n     *\n     * valid_date('15-01-2012') => false\n     *\n     * valid_date('04-0-2040') => false\n     *\n     * valid_date('06-04-2020') => true\n     *\n     * valid_date('06/04/2020') => false\n     */\n    try {\n        date = date.trim();\n        const [monthStr, dayStr, yearStr] = date.split('-');\n        const month = parseInt(monthStr, 10);\n        const day = parseInt(dayStr, 10);\n        const year = parseInt(yearStr, 10);\n\n        if (isNaN(month) || isNaN(day) || isNaN(year)) {\n            return false;\n        }\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if ((month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) && (day < 1 || day > 31)) {\n            return false;\n        }\n\n        if ((month === 4 || month === 6 || month === 9 || month === 11) && (day < 1 || day > 30)) {\n            return false;\n        }\n\n        if (month === 2 && (day < 1 || day > 29)) {\n            return false;\n        }\n    } catch {\n        return false;\n    }\n\n    return true;\n}"}
{"task_id": "HumanEval/125", "translation": "function splitWords(txt: string): string[] | number {\n    /*\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    */\n\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.replace(/,/g, \" \").split(\" \");\n    } else {\n        return Array.from(txt).filter(i => i === i.toLowerCase() && i.charCodeAt(0) % 2 === 0).length;\n    }\n}"}
{"task_id": "HumanEval/126", "translation": "function is_sorted(lst: number[]): boolean {\n    /*\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    */\n\n    const count_digit: { [key: number]: number } = {};\n    for (const i of lst) {\n        count_digit[i] = 0;\n    }\n\n    for (const i of lst) {\n        count_digit[i] += 1;\n    }\n\n    if (Object.values(count_digit).some(count => count > 2)) {\n        return false;\n    }\n\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i - 1] > lst[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}"}
{"task_id": "HumanEval/127", "translation": "function intersection(interval1: [number, number], interval2: [number, number]): string {\n    /**\n     * You are given two intervals,\n     * where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n     * The given intervals are closed which means that the interval (start, end)\n     * includes both start and end.\n     * For each given interval, it is assumed that its start is less or equal its end.\n     * Your task is to determine whether the length of intersection of these two \n     * intervals is a prime number.\n     * Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n     * which its length is 1, which not a prime number.\n     * If the length of the intersection is a prime number, return \"YES\",\n     * otherwise, return \"NO\".\n     * If the two intervals don't intersect, return \"NO\".\n     * \n     * [input/output] samples:\n     * intersection((1, 2), (2, 3)) ==> \"NO\"\n     * intersection((-1, 1), (0, 4)) ==> \"NO\"\n     * intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n\n    function isPrime(num: number): boolean {\n        if (num === 1 || num === 0) {\n            return false;\n        }\n        if (num === 2) {\n            return true;\n        }\n        for (let i = 2; i < num; i++) {\n            if (num % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    const l = Math.max(interval1[0], interval2[0]);\n    const r = Math.min(interval1[1], interval2[1]);\n    const length = r - l;\n    if (length > 0 && isPrime(length)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}"}
{"task_id": "HumanEval/128", "translation": "function prod_signs(arr: number[]): number | null {\n    /**\n     * You are given an array arr of integers and you need to return\n     * sum of magnitudes of integers multiplied by product of all signs\n     * of each number in the array, represented by 1, -1 or 0.\n     * Note: return None for empty arr.\n     * \n     * Example:\n     * >>> prod_signs([1, 2, 2, -4]) == -9\n     * >>> prod_signs([0, 1]) == 0\n     * >>> prod_signs([]) == None\n     */\n\n    if (arr.length === 0) return null;\n    const prod = arr.includes(0) ? 0 : Math.pow(-1, arr.filter(x => x < 0).length);\n    return prod * arr.reduce((acc, i) => acc + Math.abs(i), 0);\n}"}
{"task_id": "HumanEval/129", "translation": "function minPath(grid: number[][], k: number): number[] {\n    /**\n    * Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    * each cell of the grid contains a value. Every integer in the range [1, N * N]\n    * inclusive appears exactly once on the cells of the grid.\n    *\n    * You have to find the minimum path of length k in the grid. You can start\n    * from any cell, and in each step you can move to any of the neighbor cells,\n    * in other words, you can go to cells which share an edge with you current\n    * cell.\n    * Please note that a path of length k means visiting exactly k cells (not\n    * necessarily distinct).\n    * You CANNOT go off the grid.\n    * A path A (of length k) is considered less than a path B (of length k) if\n    * after making the ordered lists of the values on the cells that A and B go\n    * through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    * than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    * such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    * lst_A[j] = lst_B[j].\n    * It is guaranteed that the answer is unique.\n    * Return an ordered list of the values on the cells that the minimum path go through.\n    *\n    * Examples:\n    *\n    *     Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n    *     Output: [1, 2, 1]\n    *\n    *     Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n    *     Output: [1]\n    */\n    \n    const n: number = grid.length;\n    let val: number = n * n + 1;\n\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                const temp: number[] = [];\n\n                if (i !== 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n\n                if (j !== 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n\n                if (i !== n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n\n                if (j !== n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n\n                val = Math.min(...temp);\n            }\n        }\n    }\n\n    const ans: number[] = [];\n    for (let i = 0; i < k; i++) {\n        if (i % 2 === 0) {\n            ans.push(1);\n        } else {\n            ans.push(val);\n        }\n    }\n    return ans;\n}"}
{"task_id": "HumanEval/130", "translation": "function tri(n: number): number[] {\n    /**\n     * Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n     * the last couple centuries. However, what people don't know is Tribonacci sequence.\n     * Tribonacci sequence is defined by the recurrence:\n     * tri(1) = 3\n     * tri(n) = 1 + n / 2, if n is even.\n     * tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n     * For example:\n     * tri(2) = 1 + (2 / 2) = 2\n     * tri(4) = 3\n     * tri(3) = tri(2) + tri(1) + tri(4)\n     *        = 2 + 3 + 3 = 8 \n     * You are given a non-negative integer number n, you have to return a list of the\n     * first n + 1 numbers of the Tribonacci sequence.\n     * Examples:\n     * tri(3) = [1, 3, 2, 8]\n     */\n\n    if (n === 0) {\n        return [1];\n    }\n    \n    let myTri: number[] = [1, 3];\n    \n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            myTri.push(i / 2 + 1);\n        } else {\n            myTri.push(myTri[i - 1] + myTri[i - 2] + (i + 3) / 2);\n        }\n    }\n    \n    return myTri;\n}"}
{"task_id": "HumanEval/131", "translation": "function digits(n: number): number {\n    /**\n     * Given a positive integer n, return the product of the odd digits.\n     * Return 0 if all digits are even.\n     * For example:\n     * digits(1)  == 1\n     * digits(4)  == 0\n     * digits(235) == 15\n     */\n\n    let product = 1;\n    let oddCount = 0;\n    \n    for (const digit of n.toString()) {\n        const intDigit = parseInt(digit, 10);\n        if (intDigit % 2 === 1) {\n            product *= intDigit;\n            oddCount++;\n        }\n    }\n    \n    return oddCount === 0 ? 0 : product;\n}"}
{"task_id": "HumanEval/132", "translation": "function is_nested(string: string): boolean {\n    /*\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    */\n\n    let openingBracketIndex: number[] = [];\n    let closingBracketIndex: number[] = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            openingBracketIndex.push(i);\n        } else {\n            closingBracketIndex.push(i);\n        }\n    }\n    closingBracketIndex.reverse();\n    let cnt: number = 0;\n    let i: number = 0;\n    const l: number = closingBracketIndex.length;\n    for (let idx of openingBracketIndex) {\n        if (i < l && idx < closingBracketIndex[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}"}
{"task_id": "HumanEval/133", "translation": "function sumSquares(lst: number[]): number {\n    /**\n     * You are given a list of numbers.\n     * You need to return the sum of squared numbers in the given list,\n     * round each element in the list to the upper int (Ceiling) first.\n     * Examples:\n     * For lst = [1, 2, 3] the output should be 14\n     * For lst = [1, 4, 9] the output should be 98\n     * For lst = [1, 3, 5, 7] the output should be 84\n     * For lst = [1.4, 4.2, 0] the output should be 29\n     * For lst = [-2.4, 1, 1] the output should be 6\n     */\n\n    let squared: number = 0;\n    for (let i of lst) {\n        squared += Math.ceil(i) ** 2;\n    }\n    return squared;\n}"}
{"task_id": "HumanEval/134", "translation": "function checkIfLastCharIsALetter(txt: string): boolean {\n    /*\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") \u279e False\n    checkIfLastCharIsALetter(\"apple pi e\") \u279e True\n    checkIfLastCharIsALetter(\"apple pi e \") \u279e False\n    checkIfLastCharIsALetter(\"\") \u279e False \n    */\n   \n    const check = txt.split(' ').pop() ?? '';\n    return check.length === 1 && (97 <= check.toLowerCase().charCodeAt(0) && check.toLowerCase().charCodeAt(0) <= 122);\n}"}
{"task_id": "HumanEval/135", "translation": "function canArrange(arr: number[]): number {\n    /** \n     * Create a function which returns the largest index of an element which\n     * is not greater than or equal to the element immediately preceding it. If\n     * no such element exists then return -1. The given array will not contain\n     * duplicate values.\n     *\n     * Examples:\n     * canArrange([1,2,4,3,5]) = 3\n     * canArrange([1,2,3]) = -1\n     */\n\n    let ind = -1;\n    let i = 1;\n    while (i < arr.length) {\n        if (arr[i] < arr[i - 1]) {\n            ind = i;\n        }\n        i += 1;\n    }\n    return ind;\n}"}
{"task_id": "HumanEval/136", "translation": "function largestSmallestIntegers(lst: number[]): [number | null, number | null] {\n    /*\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as null.\n\n    Examples:\n    largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n    largestSmallestIntegers([]) == (null, null)\n    largestSmallestIntegers([0]) == (null, null)\n    */\n\n    const smallest = lst.filter(x => x < 0);\n    const largest = lst.filter(x => x > 0);\n    return [\n        smallest.length > 0 ? Math.max(...smallest) : null,\n        largest.length > 0 ? Math.min(...largest) : null\n    ];\n}"}
{"task_id": "HumanEval/137", "translation": "function compareOne(a: number | string, b: number | string): number | string | null {\n    /**\n     * Create a function that takes integers, floats, or strings representing\n     * real numbers, and returns the larger variable in its given variable type.\n     * Return None if the values are equal.\n     * Note: If a real number is represented as a string, the floating point might be . or ,\n     * \n     * compareOne(1, 2.5) \u279e 2.5\n     * compareOne(1, \"2,3\") \u279e \"2,3\"\n     * compareOne(\"5,1\", \"6\") \u279e \"6\"\n     * compareOne(\"1\", 1) \u279e null\n     */\n\n    let tempA: number | string = a;\n    let tempB: number | string = b;\n\n    if (typeof tempA === 'string') tempA = tempA.replace(',', '.');\n    if (typeof tempB === 'string') tempB = tempB.replace(',', '.');\n\n    if (parseFloat(tempA as string) === parseFloat(tempB as string)) return null;\n\n    return parseFloat(tempA as string) > parseFloat(tempB as string) ? a : b;\n}"}
{"task_id": "HumanEval/138", "translation": "function isEqualToSumEven(n: number): boolean {\n    /**\n     * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n     * Example\n     * isEqualToSumEven(4) == False\n     * isEqualToSumEven(6) == False\n     * isEqualToSumEven(8) == True\n     */\n\n    return n % 2 === 0 && n >= 8;\n}"}
{"task_id": "HumanEval/139", "translation": "function specialFactorial(n: number): number {\n    /**\n     * The Brazilian factorial is defined as:\n     * brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n     * where n > 0\n     * \n     * For example:\n     * >>> specialFactorial(4)\n     * 288\n     * \n     * The function will receive an integer as input and should return the special\n     * factorial of this integer.\n     */\n\n    let fact_i = 1;\n    let special_fact = 1;\n    for (let i = 1; i <= n; i++) {\n        fact_i *= i;\n        special_fact *= fact_i;\n    }\n    return special_fact;\n}"}
{"task_id": "HumanEval/140", "translation": "function fixSpaces(text: string): string {\n    /**\n     * Given a string text, replace all spaces in it with underscores,\n     * and if a string has more than 2 consecutive spaces,\n     * then replace all consecutive spaces with -\n     * \n     * fixSpaces(\"Example\") == \"Example\"\n     * fixSpaces(\"Example 1\") == \"Example_1\"\n     * fixSpaces(\" Example 2\") == \"_Example_2\"\n     * fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n\n    let newText = \"\";\n    let i = 0;\n    let start = 0, end = 0;\n\n    while (i < text.length) {\n        if (text[i] === \" \") {\n            end += 1;\n        } else {\n            if (end - start > 2) {\n                newText += \"-\" + text[i];\n            } else if (end - start > 0) {\n                newText += \"_\".repeat(end - start) + text[i];\n            } else {\n                newText += text[i];\n            }\n            start = end = i + 1;\n        }\n        i += 1;\n    }\n\n    if (end - start > 2) {\n        newText += \"-\";\n    } else if (end - start > 0) {\n        newText += \"_\";\n    }\n\n    return newText;\n}"}
{"task_id": "HumanEval/141", "translation": "function fileNameCheck(fileName: string): string {\n    /**\n     * Create a function which takes a string representing a file's name, and returns\n     * 'Yes' if the file's name is valid, and returns 'No' otherwise.\n     * A file's name is considered to be valid if and only if all the following conditions \n     * are met:\n     * - There should not be more than three digits ('0'-'9') in the file's name.\n     * - The file's name contains exactly one dot '.'\n     * - The substring before the dot should not be empty, and it starts with a letter from \n     * the latin alphabet ('a'-'z' and 'A'-'Z').\n     * - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n     * Examples:\n     * fileNameCheck(\"example.txt\") // => 'Yes'\n     * fileNameCheck(\"1example.dll\") // => 'No' (the name should start with a latin alphabet letter)\n     */\n\n    const suf: string[] = ['txt', 'exe', 'dll'];\n    const lst: string[] = fileName.split('.');\n    if (lst.length !== 2) {\n        return 'No';\n    }\n    if (!suf.includes(lst[1])) {\n        return 'No';\n    }\n    if (lst[0].length === 0) {\n        return 'No';\n    }\n    if (!/^[a-zA-Z]/.test(lst[0][0])) {\n        return 'No';\n    }\n    const t: number = lst[0].split('').filter(x => /\\d/.test(x)).length;\n    if (t > 3) {\n        return 'No';\n    }\n    return 'Yes';\n}"}
{"task_id": "HumanEval/142", "translation": "function sumSquares(lst: number[]): number {\n    /**\n     * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n     * multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n     * change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n     * \n     * Examples:\n     * For lst = [1,2,3] the output should be 6\n     * For lst = []  the output should be 0\n     * For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n\n    let result: number[] = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result.push(Math.pow(lst[i], 2));\n        } else if (i % 4 === 0 && i % 3 !== 0) {\n            result.push(Math.pow(lst[i], 3));\n        } else {\n            result.push(lst[i]);\n        }\n    }\n    return result.reduce((acc, curr) => acc + curr, 0);\n}"}
{"task_id": "HumanEval/143", "translation": "function wordsInSentence(sentence: string): string {\n    /**\n     * You are given a string representing a sentence,\n     * the sentence contains some words separated by a space,\n     * and you have to return a string that contains the words from the original sentence,\n     * whose lengths are prime numbers,\n     * the order of the words in the new string should be the same as the original one.\n     * \n     * Example 1:\n     *     Input: sentence = \"This is a test\"\n     *     Output: \"is\"\n     * \n     * Example 2:\n     *     Input: sentence = \"lets go for swimming\"\n     *     Output: \"go for\"\n     * \n     * Constraints:\n     *     * 1 <= len(sentence) <= 100\n     *     * sentence contains only letters\n     */\n    \n    let newLst: string[] = [];\n    let words: string[] = sentence.split(\" \");\n\n    for (let word of words) {\n        let flg: number = 0;\n        if (word.length === 1) {\n            flg = 1;\n        }\n        for (let i = 2; i < word.length; i++) {\n            if (word.length % i === 0) {\n                flg = 1;\n                break;\n            }\n        }\n        if (flg === 0 || word.length === 2) {\n            newLst.push(word);\n        }\n    }\n\n    return newLst.join(\" \");\n}"}
{"task_id": "HumanEval/144", "translation": "function simplify(x: string, n: string): boolean {\n    /**\n     * Your task is to implement a function that will simplify the expression\n     * x * n. The function returns True if x * n evaluates to a whole number and False\n     * otherwise. Both x and n, are string representation of a fraction, and have the following format,\n     * <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n     *\n     * You can assume that x, and n are valid fractions, and do not have zero as denominator.\n     *\n     * simplify(\"1/5\", \"5/1\") = True\n     * simplify(\"1/6\", \"2/1\") = False\n     * simplify(\"7/10\", \"10/2\") = False\n     */\n\n    const [a, b] = x.split(\"/\");\n    const [c, d] = n.split(\"/\");\n    const numerator = parseInt(a) * parseInt(c);\n    const denom = parseInt(b) * parseInt(d);\n    if (numerator / denom === Math.floor(numerator / denom)) {\n        return true;\n    }\n    return false;\n}"}
{"task_id": "HumanEval/145", "translation": "function orderByPoints(nums: number[]): number[] {\n    /**\n     * Write a function which sorts the given list of integers\n     * in ascending order according to the sum of their digits.\n     * Note: if there are several items with similar sum of their digits,\n     * order them based on their index in original list.\n     *\n     * For example:\n     * >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n     * >>> order_by_points([]) == []\n     */\n\n    function digitsSum(n: number): number {\n        let neg = 1;\n        if (n < 0) {\n            n = -n;\n            neg = -1;\n        }\n        let digits = n.toString().split('').map(Number);\n        digits[0] *= neg;\n        return digits.reduce((sum, digit) => sum + digit, 0);\n    }\n\n    return nums.slice().sort((a, b) => digitsSum(a) - digitsSum(b));\n}"}
{"task_id": "HumanEval/146", "translation": "function specialFilter(nums: number[]): number {\n    /**\n     * Write a function that takes an array of numbers as input and returns \n     * the number of elements in the array that are greater than 10 and both \n     * first and last digits of a number are odd (1, 3, 5, 7, 9).\n     * For example:\n     * specialFilter([15, -73, 14, -15]) => 1 \n     * specialFilter([33, -2, -3, 45, 21, 109]) => 2\n     */\n\n    let count: number = 0;\n    for (let num of nums) {\n        if (num > 10) {\n            const odd_digits: Set<number> = new Set([1, 3, 5, 7, 9]);\n            const number_as_string: string = num.toString();\n            if (odd_digits.has(parseInt(number_as_string[0])) && odd_digits.has(parseInt(number_as_string[number_as_string.length - 1]))) {\n                count += 1;\n            }\n        }\n    }\n\n    return count;\n}"}
{"task_id": "HumanEval/147", "translation": "function getMaxTriples(n: number): number {\n    /**\n     * You are given a positive integer n. You have to create an integer array a of length n.\n     * For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n     * Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n     * and a[i] + a[j] + a[k] is a multiple of 3.\n     * \n     * Example :\n     * Input: n = 5\n     * Output: 1\n     * Explanation: \n     * a = [1, 3, 7, 13, 21]\n     * The only valid triple is (1, 7, 13).\n     */\n\n    const A: number[] = Array.from({length: n}, (_, i) => (i + 1) * (i + 1) - (i + 1) + 1);\n    const ans: [number, number, number][] = [];\n\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((A[i] + A[j] + A[k]) % 3 === 0) {\n                    ans.push([A[i], A[j], A[k]]);\n                }\n            }\n        }\n    }\n\n    return ans.length;\n}"}
{"task_id": "HumanEval/148", "translation": "function bf(planet1: string, planet2: string): string[] {\n    /*\n    There are eight planets in our solar system: the closest to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return an array containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty array if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n    */\n\n    const planet_names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!planet_names.includes(planet1) || !planet_names.includes(planet2) || planet1 === planet2) {\n        return [];\n    }\n    const planet1_index = planet_names.indexOf(planet1);\n    const planet2_index = planet_names.indexOf(planet2);\n    if (planet1_index < planet2_index) {\n        return planet_names.slice(planet1_index + 1, planet2_index);\n    } else {\n        return planet_names.slice(planet2_index + 1, planet1_index);\n    }\n}"}
{"task_id": "HumanEval/149", "translation": "function sortedListSum(lst: string[]): string[] {\n    /**\n     * Write a function that accepts a list of strings as a parameter,\n     * deletes the strings that have odd lengths from it,\n     * and returns the resulted list with a sorted order,\n     * The list is always a list of strings and never an array of numbers,\n     * and it may contain duplicates.\n     * The order of the list should be ascending by length of each word, and you\n     * should return the list sorted by that rule.\n     * If two words have the same length, sort the list alphabetically.\n     * The function should return a list of strings in sorted order.\n     * You may assume that all words will have the same length.\n     * For example:\n     * assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n     * assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n     */\n\n    lst.sort();\n    let newLst: string[] = [];\n    for (let i of lst) {\n        if (i.length % 2 === 0) {\n            newLst.push(i);\n        }\n    }\n    return newLst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n}"}
{"task_id": "HumanEval/150", "translation": "function xOrY(n: number, x: number, y: number): number {\n    /**\n     * A simple program which should return the value of x if n is\n     * a prime number and should return the value of y otherwise.\n     *\n     * Examples:\n     * for xOrY(7, 34, 12) == 34\n     * for xOrY(15, 8, 5) == 5\n     */\n    \n    if (n === 1) {\n        return y;\n    }\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n}"}
{"task_id": "HumanEval/151", "translation": "function doubleTheDifference(lst: number[]): number {\n    /*\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference([-1, -2, 0]) == 0\n    doubleTheDifference([9, -2]) == 81\n    doubleTheDifference([0]) == 0  \n\n    If the input list is empty, return 0.\n    */\n\n    return lst\n        .filter(i => i > 0 && i % 2 !== 0 && Number.isInteger(i))\n        .reduce((sum, i) => sum + i ** 2, 0);\n}"}
{"task_id": "HumanEval/152", "translation": "function compare(game: number[], guess: number[]): number[] {\n    /**\n     * I think we all remember that feeling when the result of some long-awaited\n     * event is finally known. The feelings and thoughts you have at that moment are\n     * definitely worth noting down and comparing.\n     * Your task is to determine if a person correctly guessed the results of a number of matches.\n     * You are given two arrays of scores and guesses of equal length, where each index shows a match. \n     * Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n     * the value is 0, and if not, the value is the absolute difference between the guess and the score.\n     * \n     * \n     * example:\n     * \n     * compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n     * compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n     */\n\n    return game.map((score, index) => Math.abs(score - guess[index]));\n}"}
{"task_id": "HumanEval/153", "translation": "function Strongest_Extension(class_name: string, extensions: string[]): string {\n    /**\n     * You will be given the name of a class (a string) and a list of extensions.\n     * The extensions are to be used to load additional classes to the class. The\n     * strength of the extension is as follows: Let CAP be the number of the uppercase\n     * letters in the extension's name, and let SM be the number of lowercase letters \n     * in the extension's name, the strength is given by the fraction CAP - SM. \n     * You should find the strongest extension and return a string in this \n     * format: ClassName.StrongestExtensionName.\n     * If there are two or more extensions with the same strength, you should\n     * choose the one that comes first in the list.\n     * For example, if you are given \"Slices\" as the class and a list of the\n     * extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n     * return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n     * (its strength is -1).\n     * Example:\n     * for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n     */\n\n    let strong = extensions[0];\n    let my_val = extensions[0].split('').filter(x => /[A-Z]/.test(x)).length - extensions[0].split('').filter(x => /[a-z]/.test(x)).length;\n\n    for (let s of extensions) {\n        let val = s.split('').filter(x => /[A-Z]/.test(x)).length - s.split('').filter(x => /[a-z]/.test(x)).length;\n        if (val > my_val) {\n            strong = s;\n            my_val = val;\n        }\n    }\n\n    let ans = class_name + \".\" + strong;\n    return ans;\n}"}
{"task_id": "HumanEval/154", "translation": "function cycpatternCheck(a: string, b: string): boolean {\n    /**\n     * You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n     * cycpatternCheck(\"abcd\",\"abd\") => False\n     * cycpatternCheck(\"hello\",\"ell\") => True\n     * cycpatternCheck(\"whassup\",\"psus\") => False\n     * cycpatternCheck(\"abab\",\"baa\") => True\n     * cycpatternCheck(\"efef\",\"eeff\") => False\n     * cycpatternCheck(\"himenss\",\"simen\") => True\n     */\n    \n    const l = b.length;\n    const pat = b + b;\n    for (let i = 0; i <= a.length - l; i++) {\n        for (let j = 0; j <= l; j++) {\n            if (a.substring(i, i + l) === pat.substring(j, j + l)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "HumanEval/155", "translation": "function even_odd_count(num: number): [number, number] {\n    /**\n     * Given an integer. return a tuple that has the number of even and odd digits respectively.\n     *\n     * Example:\n     *    even_odd_count(-12) ==> [1, 1]\n     *    even_odd_count(123) ==> [1, 2]\n     */\n\n    let even_count = 0;\n    let odd_count = 0;\n\n    for (let i of Math.abs(num).toString()) {\n        if (parseInt(i) % 2 === 0) {\n            even_count += 1;\n        } else {\n            odd_count += 1;\n        }\n    }\n\n    return [even_count, odd_count];\n}"}
{"task_id": "HumanEval/156", "translation": "function intToMiniRoman(number: number): string {\n    /**\n     * Given a positive integer, obtain its roman numeral equivalent as a string,\n     * and return it in lowercase.\n     * Restrictions: 1 <= num <= 1000\n     * \n     * Examples:\n     * >>> intToMiniRoman(19) == 'xix'\n     * >>> intToMiniRoman(152) == 'clii'\n     * >>> intToMiniRoman(426) == 'cdxxvi'\n     */\n\n    const num: number[] = [1, 4, 5, 9, 10, 40, 50, 90,  \n                           100, 400, 500, 900, 1000];\n    const sym: string[] = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n                           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"];\n    let i: number = 12;\n    let res: string = '';\n\n    while (number) {\n        let div: number = Math.floor(number / num[i]);\n        number %= num[i];\n        while (div) {\n            res += sym[i];\n            div -= 1;\n        }\n        i -= 1;\n    }\n    return res.toLowerCase();\n}"}
{"task_id": "HumanEval/157", "translation": "function rightAngleTriangle(a: number, b: number, c: number): boolean {\n    /*\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n    */\n\n    return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b;\n}"}
{"task_id": "HumanEval/158", "translation": "function findMax(words: string[]): string {\n    /**\n     * Write a function that accepts a list of strings.\n     * The list contains different words. Return the word with maximum number\n     * of unique characters. If multiple strings have maximum number of unique\n     * characters, return the one which comes first in lexicographical order.\n     *\n     * findMax([\"name\", \"of\", \"string\"]) == \"string\"\n     * findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n     * findMax([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n     */\n\n    return words.sort((a, b) => {\n        const uniqueCharsA = new Set(a).size;\n        const uniqueCharsB = new Set(b).size;\n\n        if (uniqueCharsA !== uniqueCharsB) {\n            return uniqueCharsB - uniqueCharsA;\n        } else {\n            return a.localeCompare(b);\n        }\n    })[0];\n}"}
{"task_id": "HumanEval/159", "translation": "function eat(number: number, need: number, remaining: number): [number, number] {\n    /**\n     * You're a hungry rabbit, and you already have eaten a certain number of carrots,\n     * but now you need to eat more carrots to complete the day's meals.\n     * you should return an array of [ total number of eaten carrots after your meals,\n     *                                the number of carrots left after your meals ]\n     * if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n     * \n     * Example:\n     * * eat(5, 6, 10) -> [11, 4]\n     * * eat(4, 8, 9) -> [12, 1]\n     * * eat(1, 10, 10) -> [11, 0]\n     * * eat(2, 11, 5) -> [7, 0]\n     * \n     * Variables:\n     * @number : integer\n     *     the number of carrots that you have eaten.\n     * @need : integer\n     *     the number of carrots that you need to eat.\n     * @remaining : integer\n     *     the number of remaining carrots that exist in stock\n     * \n     * Constrain:\n     * * 0 <= number <= 1000\n     * * 0 <= need <= 1000\n     * * 0 <= remaining <= 1000\n     * \n     * Have fun :)\n     */\n    \n    if (need <= remaining) {\n        return [number + need, remaining - need];\n    } else {\n        return [number + remaining, 0];\n    }\n}"}
{"task_id": "HumanEval/160", "translation": "function doAlgebra(operator: string[], operand: number[]): number {\n    /**\n    * Given two lists operator, and operand. The first list has basic algebra operations, and\n    * the second list is a list of integers. Use the two given lists to build the algebraic\n    * expression and return the evaluation of this expression.\n    *\n    * The basic algebra operations:\n    * Addition ( + )\n    * Subtraction ( - )\n    * Multiplication ( * )\n    * Floor division ( // )\n    * Exponentiation ( ** )\n    *\n    * Example:\n    * operator['+', '*', '-']\n    * array = [2, 3, 4, 5]\n    * result = 2 + 3 * 4 - 5\n    * => result = 9\n    *\n    * Note:\n    *   The length of operator list is equal to the length of operand list minus one.\n    *   Operand is a list of non-negative integers.\n    *   Operator list has at least one operator, and operand list has at least two operands.\n    */\n    \n    let expression = operand[0].toString();\n    for (let i = 0; i < operator.length; i++) {\n        expression += operator[i] + operand[i + 1].toString();\n    }\n    return eval(expression);\n}"}
{"task_id": "HumanEval/161", "translation": "function solve(s: string): string {\n    /**\n    * You are given a string s.\n    * if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    * otherwise keep it as it is.\n    * If the string contains no letters, reverse the string.\n    * The function should return the resulted string.\n    * Examples\n    * solve(\"1234\") = \"4321\"\n    * solve(\"ab\") = \"AB\"\n    * solve(\"#a@C\") = \"#A@c\"\n    */\n\n    let flg = 0;\n    let idx = 0;\n    let newStr = s.split('');\n    for (let i of s) {\n        if (/[a-zA-Z]/.test(i)) {\n            newStr[idx] = i === i.toUpperCase() ? i.toLowerCase() : i.toUpperCase();\n            flg = 1;\n        }\n        idx += 1;\n    }\n    s = \"\";\n    for (let i of newStr) {\n        s += i;\n    }\n    if (flg === 0) {\n        return s.split('').reverse().join('');\n    }\n    return s;\n}"}
{"task_id": "HumanEval/162", "translation": "function stringToMd5(text: string): string | null {\n    /**\n     * Given a string 'text', return its md5 hash equivalent string.\n     * If 'text' is an empty string, return null.\n     *\n     * >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n     */\n\n    if (!text) {\n        return null;\n    }\n\n    const crypto = require('crypto');\n    return crypto.createHash('md5').update(text, 'ascii').digest('hex');\n}"}
{"task_id": "HumanEval/163", "translation": "function generateIntegers(a: number, b: number): number[] {\n    /**\n    * Given two positive integers a and b, return the even digits between a\n    * and b, in ascending order.\n    *\n    * For example:\n    * generateIntegers(2, 8) => [2, 4, 6, 8]\n    * generateIntegers(8, 2) => [2, 4, 6, 8]\n    * generateIntegers(10, 14) => []\n    */\n\n    const lower = Math.max(2, Math.min(a, b));\n    const upper = Math.min(8, Math.max(a, b));\n\n    const result: number[] = [];\n    for (let i = lower; i <= upper; i++) {\n        if (i % 2 === 0) {\n            result.push(i);\n        }\n    }\n\n    return result;\n}"}
